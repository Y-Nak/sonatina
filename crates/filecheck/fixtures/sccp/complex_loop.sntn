# sameln: func %complex_loop() -> i8:
# nextln:     block1:
# nextln:         fallthrough block2;
# nextln: 
# nextln:     block2:
# nextln:         v4.i8 = phi (v7 block7) (0.i8 block1);
# nextln:         v5.i1 = lt v4 100.i8;
# nextln:         br v5 block3 block4;
# nextln: 
# nextln:     block3:
# nextln:         jump block5;
# nextln: 
# nextln:     block4:
# nextln:         return 1.i8;
# nextln: 
# nextln:     block5:
# nextln:         v7.i8 = add 1.i8 v4;
# nextln:         jump block7;
# nextln: 
# nextln:     block7:
# nextln:         jump block2;
func %complex_loop() -> i8:
    block1:
        v0.i8 = add 1.i8 0.i8;
        v1.i8 = add v0 0.i8;
        v2.i8 = sub v0 1.i8;
        fallthrough block2;

    block2:
        v3.i8 = phi (v9 block7) (v0 block1);
        v4.i8 = phi (v10 block7) (v2 block1);
        v5.i1 = lt v4 100.i8;
        br v5 block3 block4;

    block3:
        v6.i1 = lt v3 20.i8;
        br v6 block5 block6;

    block4:
        return v3;

    block5:
        v7.i8 = add 1.i8 v4;
        jump block7;

    block6:
        v8.i8 = add v4 2.i8;
        fallthrough block7;

    block7:
        v9.i8 = phi (v0 block5) (v4 block6);
        v10.i8 = phi (v7 block5) (v8 block6);
        jump block2;
