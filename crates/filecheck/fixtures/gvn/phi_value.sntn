# check:    block0:
# nextln:        v0.i8 = imm_i8 0;
# nextln:        br v0 block1 block2;
# nextln: 
# nextln:    block1:
# nextln:        v1.i8 = imm_i8 1;
# nextln:        v2.i8 = add v1 v0;
# nextln:        jump block3;
# nextln: 
# nextln:    block2:
# nextln:        v3.i8 = imm_i8 2;
# nextln:        v4.i8 = add v3 v0;
# nextln:        jump block3;
# nextln: 
# nextln:    block3:
# nextln:        v7.i8 = phi (v2 block1) (v4 block2);
# nextln:        v5.i8 = phi (v1 block1) (v3 block2);
# nextln:        return v7;
func %phi_value() -> i32:
    block0:
        v0.i8 = imm_i8 0;
        br v0 block1 block2;

    block1:
        v1.i8 = imm_i8 1;
        v2.i8 = add v1 v0;
        jump block3;

    block2:
        v3.i8 = imm_i8 2;
        v4.i8 = add v3 v0;
        jump block3;

    block3:
        v5.i8 = phi (v1 block1) (v3 block2);
        v6.i8 = add v5 v0;
        return v6;
