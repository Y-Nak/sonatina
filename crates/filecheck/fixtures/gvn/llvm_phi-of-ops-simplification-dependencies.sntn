#! This test case is translated from
#! <https://github.com/llvm/llvm-project/blob/main/llvm/test/Transforms/NewGVN/phi-of-ops-simplification-dependencies.ll>

# regex: VALUE=\bv\d+\b
# check:  block0:
# nextln:     jump block1;
# nextln: 
# nextln: block1:
# nextln:     $(var=$VALUE).i32 = phi (0.i32 block0) (v1 block5);
# nextln:     v1.i32 = phi (1.i32 block0) (v4 block5);
# nextln:     br v0 block5 block2;
# nextln: 
# nextln: block2:
# nextln:     jump block3;
# nextln: 
# nextln: block3:
# nextln:     v3.i1 = gt $var 0.i32;
# nextln:     br v3 block4 block6;
# nextln: 
# nextln: block4:
# nextln:     return;
# nextln: 
# nextln: block5:
# nextln:     v4.i32 = add v1 1.i32;
# nextln:     jump block1;
# nextln: 
# nextln: block6:
# nextln:     v5.i32 = add v1 1.i32;
# nextln:     store @memory v5 v5;
# nextln:     jump block4;
func %llvm_test1(v0.i1):
    block0:
        jump block1;

    block1:
        v1.i32 = phi (1.i32 block0) (v4 block5);
        br v0 block5 block2;

    block2:
        v2.i32 = sub v1 1.i32;
        jump block3;

    block3:
        v3.i1 = gt v2 0.i32;
        br v3 block4 block6;

    block4:
        return;

    block5:
        v4.i32 = add v1 1.i32;
        jump block1;

    block6:
        v5.i32 = add v1 1.i32;
        store @memory v5 v5;
        jump block4;


# regex: VALUE=\bv\d+\b
# check:  block0:
# nextln:     jump block1;
# nextln: 
# nextln: block1:
# nextln:     v15.i64 = phi (-1.i64 block0) (v3 block5);
# nextln:     v3.i64 = phi (v7 block5) (0.i64 block0);
# nextln:     br v0 block2 block4;
# nextln: 
# nextln: block2:
# nextln:     v4.i1 = eq v3 0.i64;
# nextln:     br v4 block5 block3;
# nextln: 
# nextln: block3:
# nextln:     v5.i64 = add v3 1.i64;
# nextln:     store @memory v1 v5;
# nextln:     return;
# nextln: 
# nextln: block4:
# nextln:     store @memory v1 v15;
# nextln:     jump block5;
# nextln: 
# nextln: block5:
# nextln:     v7.i64 = add v3 1.i64;
# nextln:     v8.i1 = gt v7 v2;
# nextln:     br v8 block1 block6;
# nextln: 
# nextln: block6:
# nextln:     return;
func %llvm_test2(v0.i1, v1.i16, v2.i64):
    block0:
        jump block1;

    block1:
        v3.i64 = phi (v7 block5) (0.i64 block0);
        br v0 block2 block4;

    block2:
        v4.i1 = eq v3 0.i64;
        br v4 block5 block3;

    block3:
        v5.i64 = add v3 1.i64;
        store @memory v1 v5;
        return;

    block4:
        v6.i64 = sub v3 1.i64;
        store @memory v1 v6;
        jump block5;

    block5:
        v7.i64 = add v3 1.i64;
        v8.i1 = gt v7 v2;
        br v8 block1 block6;

    block6:
        return;

# check:  block0:
# nextln:     jump block1;
# nextln: 
# nextln: block1:
# nextln:     br v1 block4 block2;
# nextln: 
# nextln: block2:
# nextln:     v3.i32 = phi (v4 block2) (0.i32 block1);
# nextln:     v4.i32 = add v3 1.i32;
# nextln:     v5.i32 = load @storage v0 i32;
# nextln:     v6.i1 = lt v4 v5;
# nextln:     br v6 block2 block3;
# nextln: 
# nextln: block3:
# nextln:     jump block4;
# nextln: 
# nextln: block4:
# nextln:     v7.i32 = phi (0.i32 block1) (v5 block3);
# nextln:     v8.i1 = lt 1.i32 v7;
# nextln:     br v8 block1 block5;
# nextln: 
# nextln: block5:
# nextln:     return;
func %llvm_pr49873_cmp_simplification_dependency(v0.i64, v1.i1):
    block0:
        jump block1;

    block1:
        v2.i32 = add 0.i32 1.i32;
        br v1 block4 block2;

    block2:
        v3.i32 = phi (v4 block2) (0.i32 block1);
        v4.i32 = add v3 1.i32;
        v5.i32 = load @storage v0 i32;
        v6.i1 = lt v4 v5;
        br v6 block2 block3;

    block3:
        jump block4;

    block4:
        v7.i32 = phi (0.i32 block1) (v5 block3);
        v8.i1 = lt v2 v7;
        br v8 block1 block5;

    block5:
        return;
