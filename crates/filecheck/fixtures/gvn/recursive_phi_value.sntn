# check:  block6:
# nextln:     v10.i8 = phi (v2 block3) (v4 block4);
# nextln:     v7.i8 = phi (v1 block3) (v3 block4);
# check:  block7:
# nextln:     v11.i8 = phi (v6 block5) (v10 block6);
# check:      return v11;
func %recursive_phi_value(v0.i8) -> i8:
    block0:
        br v0 block1 block2;

    block1:
        br v0 block3 block4;

    block2:
        jump block5;

    block3:
        v1.i8 = imm_i8 3;
        v2.i8 = add v1 v0;
        jump block6;

    block4:
        v3.i8 = imm_i8 4;
        v4.i8 = add v3 v0;
        jump block6;

    block5:
        v5.i8 = imm_i8 5;
        v6.i8 = add v5 v0;
        jump block7;

    block6:
        v7.i8 = phi (v1 block3) (v3 block4);
        jump block7;

    block7:
        v8.i8 = phi (v7 block6) (v5 block5);
        v9.i8 = add v8 v0;
        return v9;
