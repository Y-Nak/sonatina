#! This test case is translated from
#! <https://github.com/llvm/llvm-project/blob/main/llvm/test/Transforms/NewGVN/todo-pr42422-phi-of-ops.ll>


# regex: VALUE=\bv\d+\b
# check:  block0:
# nextln:     jump block1;
# nextln: 
# nextln: block1:
# nextln:     jump block2;
# nextln: 
# nextln: block2:
# nextln:     v2.i32 = phi (v10 block17) (0.i32 block1);
# nextln:     v3.i1 = sle v2 1.i32;
# nextln:     br v3 block3 block18;
# nextln: 
# nextln: block3:
# nextln:     br v0 block5 block4;
# nextln: 
# nextln: block4:
# nextln:     jump block6;
# nextln: 
# nextln: block5:
# nextln:     jump block16;
# nextln: 
# nextln: block6:
# nextln:     br v1 block7 block8;
# nextln: 
# nextln: block7:
# nextln:     jump block14;
# nextln: 
# nextln: block8:
# nextln:     jump block9;
# nextln: 
# nextln: block9:
# nextln:     v4.i64 = phi (v6 block10) (0.i64 block8);
# nextln:     v5.i1 = sle v4 1.i64;
# nextln:     br v5 block10 block11;
# nextln: 
# nextln: block10:
# nextln:     v6.i64 = add v4 1.i64;
# nextln:     jump block9;
# nextln: 
# nextln: block11:
# nextln:     jump block12;
# nextln: 
# nextln: block12:
# nextln:     jump block14;
# nextln: 
# nextln: block14:
# nextln:     v7.i32 = phi (1.i32 block12) (9.i32 block7);
# nextln:     br_table v7 block16 (0.i32 block6) (9.i32 block15);
# nextln: 
# nextln: block15:
# nextln:     jump block16;
# nextln: 
# nextln: block16:
# nextln:     $(var1=$VALUE).i1 = phi (0.i1 block5) (0.i1 block14) (-1.i1 block15);
# nextln:     v8.i32 = phi (0.i32 block15) (v7 block14) (1.i32 block5);
# nextln:     br $var1 block17 block19;
# nextln: 
# nextln: block17:
# nextln:     v10.i32 = add v2 1.i32;
# nextln:     jump block2;
# nextln: 
# nextln: block18:
# nextln:     jump block19;
# nextln: 
# nextln: block19:
# nextln:     $(var2=$VALUE).i1 = phi ($var1 block16) (-1.i1 block18);
# nextln:     v11.i32 = phi (v8 block16) (0.i32 block18);
# nextln:     br $var2 block1 block20;
# nextln: 
# nextln: block20:
# nextln:     return;
func %llvm_d(v0.i1, v1.i1):
    block0:
        jump block1;

    block1:
        jump block2;

    block2:
        v2.i32 = phi (v10 block17) (0.i32 block1);
        v3.i1 = sle v2 1.i32;
        br v3 block3 block18;

    block3:
        br v0 block5 block4;

    block4:
        jump block6;

    block5:
        jump block16;

    block6:
        br v1 block7 block8;

    block7:
        jump block14;

    block8:
        jump block9;

    block9:
        v4.i64 = phi (v6 block10) (0.i64 block8);
        v5.i1 = sle v4 1.i64;
        br v5 block10 block11;

    block10:
        v6.i64 = add v4 1.i64;
        jump block9;

    block11:
        br -1.i1 block12 block13;

    block12:
        jump block14;

    block13:
        jump block14;

    block14:
        v7.i32 = phi (10.i32 block13) (1.i32 block12) (9.i32 block7);
        br_table v7 block16 (0.i32 block6) (9.i32 block15);

    block15:
        jump block16;

    block16:
        v8.i32 = phi (0.i32 block15) (v7 block14) (1.i32 block5);
        v9.i1 = eq v8 0.i32;
        br v9 block17 block19;

    block17:
        v10.i32 = add v2 1.i32;
        jump block2;

    block18:
        jump block19;

    block19:
        v11.i32 = phi (v8 block16) (0.i32 block18);
        v12.i1 = eq v11 0.i32;
        br v12 block1 block20;

    block20:
        return;
