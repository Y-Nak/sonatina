target = "evm-ethereum-london"

# regex: VALUE=\bv\d+\b
# check:  block0:
# nextln:       v2.i32 = add v1 1.i32;
# nextln:       v3.i32 = sub v1 1.i32;
# nextln:       br v0 block1 block2;
# nextln: 
# nextln:   block1:
# nextln:       jump block6;
# nextln: 
# nextln:   block2:
# nextln:       jump block6;
# nextln: 
# nextln:   block6:
# nextln:       $(var=$VALUE).i32 = phi (1.i32 block1) (2.i32 block2);
# nextln:       v5.i32 = add v2 v3;
# nextln:       jump block3;
# nextln: 
# nextln:   block3:
# nextln:       v4.i32 = phi (v6 block4) ($var block6);
# nextln:       jump block4;
# nextln: 
# nextln:   block4:
# nextln:       v6.i32 = add v4 v3;
# nextln:       v7.i1 = slt v6 10.i32;
# nextln:       br v7 block3 block5;
# nextln: 
# nextln:   block5:
# nextln:       return;
func public %multiple_preheader(v0.i1, v1.i32) -> void:
    block0:
        v2.i32 = add v1 1.i32;
        v3.i32 = sub v1 1.i32;
        br v0 block1 block2;

    block1:
        jump block3;

    block2:
        jump block3;

    block3:
        v4.i32 = phi (1.i32 block1) (2.i32 block2) (v6 block4);
        jump block4;

    block4:
        v5.i32 = add v2 v3;
        v6.i32 = add v4 v3;
        v7.i1 = slt v6 10.i32;
        br v7 block3 block5;

    block5:
        return;

# regex: VALUE=\bv\d+\b
# check:  block0:
# nextln:       v2.i32 = add v1 1.i32;
# nextln:       v3.i32 = sub v1 1.i32;
# nextln:       br v0 block1 block2;
# nextln: 
# nextln:   block1:
# nextln:       jump block6;
# nextln: 
# nextln:   block2:
# nextln:       jump block6;
# nextln: 
# nextln:   block6:
# nextln:       $(var=$VALUE).i32 = phi (1.i32 block1) (2.i32 block2);
# nextln:       v6.i32 = add v2 v3;
# nextln:       v8.i32 = sub v3 v2;
# nextln:       jump block3;
# nextln: 
# nextln:   block3:
# nextln:       v4.i32 = phi (v7 block4) ($var block6);
# nextln:       v5.i32 = phi (v8 block4) ($var block6);
# nextln:       jump block4;
# nextln: 
# nextln:   block4:
# nextln:       v7.i32 = add v4 v3;
# nextln:       v9.i1 = slt v7 10.i32;
# nextln:       br v9 block3 block5;
# nextln: 
# nextln:   block5:
# nextln:       return;
func public %multiple_preheader2(v0.i1, v1.i32) -> void:
    block0:
        v2.i32 = add v1 1.i32;
        v3.i32 = sub v1 1.i32;
        br v0 block1 block2;

    block1:
        jump block3;

    block2:
        jump block3;

    block3:
        v4.i32 = phi (1.i32 block1) (2.i32 block2) (v7 block4);
        v5.i32 = phi (2.i32 block2) (1.i32 block1) (v8 block4);
        jump block4;

    block4:
        v6.i32 = add v2 v3;
        v7.i32 = add v4 v3;
        v8.i32 = sub v3 v2;
        v9.i1 = slt v7 10.i32;
        br v9 block3 block5;

    block5:
        return;
