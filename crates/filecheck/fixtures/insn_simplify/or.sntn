target = "evm-ethereum-london"

# v0 | -1 => -1
# check: return -1.i8;
func %or0(v0.i8) -> i8:
    block0:
        v1.i8 = or v0 -1.i8;
        return v1;

# v0 | v0 => v0
# check: return v0;
func %or1(v0.i8) -> i8:
    block0:
        v1.i8 = or v0 v0;
        return v1;

# v0 | 0 => v0
# check: return v0;
func %or2(v0.i8) -> i8:
    block0:
        v1.i8 = or v0 0.i8;
        return v1;

# v0 | !v0 => -1
# check: return -1.i8;
func %or3(v0.i8) -> i8:
    block0:
        v1.i8 = not v0;
        v2.i8 = or v0 v1;
        return v2;

# v0 | (v0 & v1) => v0
# check: return v0;
func %or4(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = or v0 v2;
        return v3;

# v0 | (v1 & v0) => v0
# check: return v0;
func %or5(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v1 v0;
        v3.i8 = or v0 v2;
        return v3;

# v0 | !(v0 & v1) => -1
# check: return -1.i8;
func %or6(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = not v2;
        v4.i8 = or v0 v3;
        return v4;

# v0 | !(v1 & v0) => -1
# check: return -1.i8;
func %or7(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v1 v0;
        v3.i8 = not v2;
        v4.i8 = or v0 v3;
        return v4;

# (v0 ^ v1) | (v0 & !v1) => (v0 ^ v1)
# check: return v2;
func %or8(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v0 v1;
        v3.i8 = not v1;
        v4.i8 = and v0 v3;
        v5.i8 = or v2 v4;
        return v5;

# (v0 ^ 1) | (!v1 & v0) => (v0 ^ v1)
# check: return v2;
func %or9(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v0 v1;
        v3.i8 = not v1;
        v4.i8 = and v3 v0;
        v5.i8 = or v2 v4;
        return v5;

# (v0 ^ v1) | (!v0 & v1) => (v0 ^ v1)
# check: return v2;
func %or10(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v0 v1;
        v3.i8 = not v0;
        v4.i8 = and v3 v1;
        v5.i8 = or v2 v4;
        return v5;

# (v0 ^ v1) | (v1 & !v0) => (v0 ^ v1)
# check: return v2;
func %or11(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v0 v1;
        v3.i8 = not v0;
        v4.i8 = and v1 v3;
        v5.i8 = or v2 v4;
        return v5;

# (!v0 ^ v1) | (v0 & v1) => (!v0 ^ v1)
# check: return v3;
func %or12(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v0;
        v3.i8 = xor v2 v1;
        v4.i8 = and v0 v1;
        v5.i8 = or v3 v4;
        return v5;

# (!v0 ^ v1) | (v1 & v0) => (!v0 ^ v1)
# check: return v3;
func %or13(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v0;
        v3.i8 = xor v2 v1;
        v4.i8 = and v1 v0;
        v5.i8 = or v3 v4;
        return v5;

# (v0 ^ !v1) | (v0 & v1) => (v0 ^ !v1)
# check: return v3;
func %or14(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v1;
        v3.i8 = xor v0 v2;
        v4.i8 = and v0 v1;
        v5.i8 = or v3 v4;
        return v5;

# (v0 ^ !v1) | (v1 & v0) => (v0 ^ !v1)
# check: return v3;
func %or15(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v1;
        v3.i8 = xor v0 v2;
        v4.i8 = and v1 v0;
        v5.i8 = or v3 v4;
        return v5;

# (v0 | v1) | (v0 ^ v1) => (v0 | v1)
# check: return v2;
func %or16(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = or v0 v1;
        v3.i8 = xor v0 v1;
        v4.i8 = or v2 v3;
        return v4;

# (v0 | v1) | (v1 ^ v0) => (v0 | v1)
# check: return v2;
func %or17(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = or v0 v1;
        v3.i8 = xor v1 v0;
        v4.i8 = or v2 v3;
        return v4;

# (!v0 & v1) | !(v0 | v1) => !v0
# check: return v2;
func %or18(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v0;
        v3.i8 = and v2 v1;
        v4.i8 = or v0 v1;
        v5.i8 = not v4;
        v6.i8 = or v3 v5;
        return v6;

# (!v0 & v1) | !(v1 | v0) => !v0
# check: return v2;
func %or19(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v0;
        v3.i8 = and v2 v1;
        v4.i8 = or v1 v0;
        v5.i8 = not v4;
        v6.i8 = or v3 v5;
        return v6;

# (v0 & !v1) | !(v0 | v1) => !v1
# check: return v2;
func %or20(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v1;
        v3.i8 = and v0 v2;
        v4.i8 = or v0 v1;
        v5.i8 = not v4;
        v6.i8 = or v3 v5;
        return v6;

# (v0 & !v1) | !(v1 | v0) => !v1
# check: return v2;
func %or21(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = not v1;
        v3.i8 = and v0 v2;
        v4.i8 = or v1 v0;
        v5.i8 = not v4;
        v6.i8 = or v3 v5;
        return v6;
