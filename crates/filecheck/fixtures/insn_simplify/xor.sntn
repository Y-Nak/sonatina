# v0 ^ 0 => v0
# check: return v0;
func %xor0(v0.i8) -> i8:
    block0:
        v1.i8 = xor v0 0.i8;
        return v1;

# v0 ^ v0 => 0
# check: return 0.i8;
func %xor1(v0.i8) -> i8:
    block0:
        v1.i8 = xor v0 v0;
        return v1;

# v0 ^ !v0 => -1
# check: return -1.i8;
func %xor2(v0.i8) -> i8:
    block0:
        v1.i8 = not v0;
        v2.i8 = xor v0 v1;
        return v2;

# v0 ^ (v0 ^ v1) => v1
# check: return v1;
func %xor3(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v0 v1;
        v3.i8 = xor v0 v2;
        return v3;

# v0 ^ (v1 ^ v0) => v1
# check: return v1;
func %xor4(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = xor v1 v0;
        v3.i8 = xor v0 v2;
        return v3;

# (v0 | v1) ^ (!v0 & v1) => v0
# check: return v0;
func %xor5(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = or v0 v1;
        v3.i8 = not v0;
        v4.i8 = and v3 v1;
        v5.i8 = xor v2 v4;
        return v5;

# (v0 | v1) ^ (v1 & !v0) => v0
# check: return v0;
func %xor6(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = or v0 v1;
        v3.i8 = not v0;
        v4.i8 = and v1 v3;
        v5.i8 = xor v2 v4;
        return v5;

# (v0 | v1) ^ (v0 & !v1) => v1
# check: return v1;
func %xor7(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = or v0 v1;
        v3.i8 = not v1;
        v4.i8 = and v0 v3;
        v5.i8 = xor v2 v4;
        return v5;

# (v0 & v1) ^ (!v0 | v1) => !v0
# check: return v3;
func %xor8(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = not v0;
        v4.i8 = or v3 v1;
        v5.i8 = xor v2 v4;
        return v5;

# (v0 & v1) ^ (v1 | !v0) => !v0
# check: return v3;
func %xor9(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = not v0;
        v4.i8 = or v1 v3;
        v5.i8 = xor v2 v4;
        return v5;


# (v0 & v1) ^ (v0 | !v1) => !v1
# check: return v3;
func %xor10(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = not v1;
        v4.i8 = or v0 v3;
        v5.i8 = xor v2 v4;
        return v5;

# (v0 & v1) ^ (!v1 | v0) => !v1
# check: return v3;
func %xor11(v0.i8, v1.i8) -> i8:
    block0:
        v2.i8 = and v0 v1;
        v3.i8 = not v1;
        v4.i8 = or v3 v0;
        v5.i8 = xor v2 v4;
        return v5;
