target = "evm-ethereum-london"


#[(0.i8) -> 255.i8]
#[(255.i8) -> 0.i8]
func private %not(v0.i8) -> i8 {
    block0:
        v1.i8 = not v0;
        return v1;
}

#[(255.i32, 250.i32) -> 505.i32]
#[(-1.i32, 1.i32) -> 0.i32]
func private %add(v0.i32, v1.i32) -> i32 {
    block0:
        v2.i32 = add v0 v1;
        return v2;
}


#[(1.i32, 1.i32) -> 0.i32]
#[(-1.i32, -1.i32) -> 0.i32]
func private %sub(v0.i32, v1.i32) -> i32 {
    block0:
        v2.i32 = sub v0 v1;
        return v2;
}


#[(1.i256, 1.i256) -> 1.i256]
#[(2.i256, 10.i256) -> 1024.i256]
func private %power(v0.i256, v1.i256) -> i256 {
    block0:
        br_table v1 block3 (0.i256 block1) (1.i256 block2);

    block1:
        jump block4;

    block2:
        jump block4;

    block3:
        v6.i256 = mul v0 v0;
        v9.i256 = evm_udiv v1 2.i256;
        v10.i256 = call %power v6 v9;
        v11.i256 = evm_umod v1 2.i256;
        br_table v11 block6 (1.i256 block5);

    block4:
        v15.i256 = phi (1.i256 block1) (v0 block2) (v16 block6);
        return v15;

    block5:
        v14.i256 = mul v0 v10;
        jump block6;

    block6:
        v16.i256 = phi (v10 block3) (v14 block5);
        jump block4;

}
