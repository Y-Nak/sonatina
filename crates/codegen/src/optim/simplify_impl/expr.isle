(type bool (primitive bool))

(type Value (primitive Value))
(type Expr (primitive Expr))
(type ExprValue (primitive ExprValue))

(type Block (primitive Block))

(type ArgList extern (enum))
(type BlockList extern (enum))
(type BrTableDefaultDest (enum))

(type Type extern (enum))

(type ArgArray1 extern (enum))
(decl arg_array1 (ExprValue) ArgArray1)
(extern extractor infallible arg_array1 unpack_arg_array1)
(extern constructor arg_array1 pack_arg_array1)

(type ArgArray2 extern (enum))
(decl arg_array2 (ExprValue ExprValue) ArgArray2)
(extern extractor infallible arg_array2 unpack_arg_array2)
(extern constructor arg_array2 pack_arg_array2)

(type BlockArray1 extern (enum))
(type BlockArray2 extern (enum))

(decl expr_data (ExprData) Expr)
(extern extractor infallible expr_data expr_data)

(decl value_ty (Type) ExprValue)
(extern extractor infallible value_ty value_ty)

(decl value_expr (Expr) ExprValue)
(extern extractor value_expr value_expr)

(decl value_with_ty (ExprValue Type) ExprValue)
(extractor
  (value_with_ty value ty)
  (and value (value_ty ty))
)

(decl value_expr_with_ty (Expr Type) ExprValue)
(extractor
  (value_expr_with_ty insn ty)
  (and (value_expr insn) (value_ty ty))
)

(type
  UnaryOp extern
  (enum
    Not
    Neg
  )
)

(type
  BinaryOp extern
  (enum
    Add
    Sub
    Mul
    Udiv
    Sdiv
    Lt
    Gt
    Slt
    Sgt
    Le
    Ge
    Sle
    Sge
    Eq
    Ne
    And
    Or
    Xor
  )
)

(type
  CastOp extern
  (enum
    Sext
    Zext
    Trunc
  )
)
(type
  JumpOp extern
  (enum
    Jump
    FallThrough
  )
)

(type
  DataLocationKind extern
  (enum
    Memory
    Storage
  )
)

(type
  ExprData extern
  (enum
    (Unary (code UnaryOp) (args ArgArray1))
    (Binary (code BinaryOp) (args ArgArray2))
    (Cast (code CastOp) (args ArgArray1) (ty Type))
    (Load (args ArgArray1) (loc DataLocationKind))
    (Store (args ArgArray2) (ty Type) (loc DataLocationKind))
    (Jump (code JumpOp) (dests BlockArray1))
    (Branch (args ArgArray1) (dests BlockArray2))
    (BrTable (args ArgList) (default BrTableDefaultDest) (table BlockList))
    (Alloca (ty Type))
    (Return (args ArgList))
    (Phi (args ArgList) (blocks BlockList))
  )
)


(decl extract_not (ExprValue) Expr)
(extractor
  (extract_not lhs)
  (expr_data (ExprData.Unary (UnaryOp.Not) (arg_array1 lhs)))
)

(decl extract_neg (ExprValue) Expr)
(extractor
  (extract_neg lhs)
  (expr_data (ExprData.Unary (UnaryOp.Neg) (arg_array1 lhs)))
)

(decl extract_add (ExprValue ExprValue) Expr)
(extractor
  (extract_add lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Add) (arg_array2 lhs rhs)))
)

(decl extract_sub (ExprValue ExprValue) Expr)
(extractor
  (extract_sub lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Sub) (arg_array2 lhs rhs)))
)

(decl extract_mul (ExprValue ExprValue) Expr)
(extractor
  (extract_mul lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Mul) (arg_array2 lhs rhs)))
)

(decl extract_sdiv (ExprValue ExprValue) Expr)
(extractor
  (extract_sdiv lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Sdiv) (arg_array2 lhs rhs)))
)

(decl extract_udiv (ExprValue ExprValue) Expr)
(extractor
  (extract_udiv lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Udiv) (arg_array2 lhs rhs)))
)

(decl extract_lt (ExprValue ExprValue) Expr)
(extractor
  (extract_lt lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Lt) (arg_array2 lhs rhs)))
)

(decl extract_gt (ExprValue ExprValue) Expr)
(extractor
  (extract_gt lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Gt) (arg_array2 lhs rhs)))
)

(decl extract_slt (ExprValue ExprValue) Expr)
(extractor
  (extract_slt lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Slt) (arg_array2 lhs rhs)))
)

(decl extract_sgt (ExprValue ExprValue) Expr)
(extractor
  (extract_sgt lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Sgt) (arg_array2 lhs rhs)))
)

(decl extract_le (ExprValue ExprValue) Expr)
(extractor
  (extract_le lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Le) (arg_array2 lhs rhs)))
)

(decl extract_ge (ExprValue ExprValue) Expr)
(extractor
  (extract_ge lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Ge) (arg_array2 lhs rhs)))
)

(decl extract_sle (ExprValue ExprValue) Expr)
(extractor
  (extract_sle lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Sle) (arg_array2 lhs rhs)))
)

(decl extract_sge (ExprValue ExprValue) Expr)
(extractor
  (extract_sge lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Sge) (arg_array2 lhs rhs)))
)

(decl extract_eq (ExprValue ExprValue) Expr)
(extractor
  (extract_eq lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Eq) (arg_array2 lhs rhs)))
)

(decl extract_ne (ExprValue ExprValue) Expr)
(extractor
  (extract_ne lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Ne) (arg_array2 lhs rhs)))
)

(decl extract_and (ExprValue ExprValue) Expr)
(extractor
  (extract_and lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.And) (arg_array2 lhs rhs)))
)

(decl extract_or (ExprValue ExprValue) Expr)
(extractor
  (extract_or lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Or) (arg_array2 lhs rhs)))
)

(decl extract_xor (ExprValue ExprValue) Expr)
(extractor
  (extract_xor lhs rhs)
  (expr_data (ExprData.Binary (BinaryOp.Xor) (arg_array2 lhs rhs)))
)
