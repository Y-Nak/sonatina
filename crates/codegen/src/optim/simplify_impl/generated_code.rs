// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - ../../isle/prelude.isle
// - ../../isle/ir.isle
// - rules.isle

#![allow(dead_code, unreachable_code, unreachable_patterns)]
#![allow(unused_imports, unused_variables, non_snake_case)]
#![allow(irrefutable_let_patterns)]

use super::*; // Pulls in all external types.

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unpack_value_array1(&mut self, arg0: &ValueArray1) -> Value;
    fn pack_value_array1(&mut self, arg0: Value) -> ValueArray1;
    fn unpack_value_array2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_block_array1(&mut self, arg0: &BlockArray1) -> Block;
    fn pack_block_array1(&mut self, arg0: Block) -> BlockArray1;
    fn unpack_block_array2(&mut self, arg0: &BlockArray2) -> (Block, Block);
    fn pack_block_array2(&mut self, arg0: Block, arg1: Block) -> BlockArray2;
    fn insn_data(&mut self, arg0: Insn) -> InsnData;
    fn value_ty(&mut self, arg0: Value) -> Type;
    fn value_insn(&mut self, arg0: Value) -> Option<Insn>;
    fn is_zero(&mut self, arg0: Value) -> bool;
    fn is_one(&mut self, arg0: Value) -> bool;
    fn is_two(&mut self, arg0: Value) -> bool;
    fn make_zero(&mut self, arg0: &Type) -> Value;
    fn make_one(&mut self, arg0: &Type) -> Value;
    fn make_all_one(&mut self, arg0: &Type) -> Value;
    fn is_same(&mut self, arg0: Value, arg1: Value) -> bool;
}

// Generated as internal constructor for term simplify.
pub(crate) fn constructor_simplify<C: Context>(ctx: &mut C, arg0: Insn) -> Option<SimplifyResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::insn_data(ctx, pattern0_0);
    if let &InsnData::Binary {
        code: ref pattern2_0,
        args: ref pattern2_1,
    } = &pattern1_0
    {
        match &pattern2_0 {
            &BinaryOp::Add => {
                let (pattern4_0, pattern4_1) = C::unpack_value_array2(ctx, &pattern2_1);
                let pattern5_0 = C::is_zero(ctx, pattern4_0);
                if pattern5_0 == true {
                    // Rule at rules.isle line 48.
                    let expr0_0 = SimplifyResult::Value { val: pattern4_1 };
                    return Some(expr0_0);
                }
                if let Some(pattern5_0) = C::value_insn(ctx, pattern4_0) {
                    let pattern6_0 = C::insn_data(ctx, pattern5_0);
                    match &pattern6_0 {
                        &InsnData::Unary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } => {
                            if let &UnaryOp::Neg = &pattern7_0 {
                                let pattern9_0 = C::unpack_value_array1(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern9_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern4_1, pattern10_0);
                                    if pattern11_0 == true {
                                        let pattern13_0 = C::value_ty(ctx, pattern4_1);
                                        // Rule at rules.isle line 61.
                                        let expr0_0 = C::make_zero(ctx, &pattern13_0);
                                        let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                                        return Some(expr1_0);
                                    }
                                }
                            }
                        }
                        &InsnData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } => {
                            if let &BinaryOp::Sub = &pattern7_0 {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern9_1);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern4_1, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 75.
                                        let expr0_0 = SimplifyResult::Value { val: pattern9_0 };
                                        return Some(expr0_0);
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                let pattern5_0 = C::is_zero(ctx, pattern4_1);
                if pattern5_0 == true {
                    // Rule at rules.isle line 42.
                    let expr0_0 = SimplifyResult::Value { val: pattern4_0 };
                    return Some(expr0_0);
                }
                if let Some(pattern5_0) = C::value_insn(ctx, pattern4_1) {
                    let pattern6_0 = C::insn_data(ctx, pattern5_0);
                    match &pattern6_0 {
                        &InsnData::Unary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } => {
                            match &pattern7_0 {
                                &UnaryOp::Not => {
                                    let pattern9_0 = C::unpack_value_array1(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_same(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                            // Rule at rules.isle line 82.
                                            let expr0_0 = C::make_all_one(ctx, &pattern13_0);
                                            let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                                            return Some(expr1_0);
                                        }
                                    }
                                }
                                &UnaryOp::Neg => {
                                    let pattern9_0 = C::unpack_value_array1(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_same(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                            // Rule at rules.isle line 54.
                                            let expr0_0 = C::make_zero(ctx, &pattern13_0);
                                            let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                                            return Some(expr1_0);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        &InsnData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } => {
                            if let &BinaryOp::Sub = &pattern7_0 {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern4_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern9_1, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 68.
                                        let expr0_0 = SimplifyResult::Value { val: pattern9_0 };
                                        return Some(expr0_0);
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
            }
            &BinaryOp::Sub => {
                let (pattern4_0, pattern4_1) = C::unpack_value_array2(ctx, &pattern2_1);
                let closure5 = || {
                    return Some(pattern4_0);
                };
                if let Some(pattern5_0) = closure5() {
                    let pattern6_0 = C::is_same(ctx, pattern4_1, pattern5_0);
                    if pattern6_0 == true {
                        let pattern8_0 = C::value_ty(ctx, pattern4_1);
                        // Rule at rules.isle line 99.
                        let expr0_0 = C::make_zero(ctx, &pattern8_0);
                        let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                        return Some(expr1_0);
                    }
                }
                if let Some(pattern5_0) = C::value_insn(ctx, pattern4_0) {
                    let pattern6_0 = C::insn_data(ctx, pattern5_0);
                    if let &InsnData::Binary {
                        code: ref pattern7_0,
                        args: ref pattern7_1,
                    } = &pattern6_0
                    {
                        match &pattern7_0 {
                            &BinaryOp::Add => {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern9_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern4_1, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 127.
                                        let expr0_0 = SimplifyResult::Value { val: pattern9_1 };
                                        return Some(expr0_0);
                                    }
                                }
                            }
                            &BinaryOp::Sub => {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern9_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern4_1, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 113.
                                        let expr0_0 = UnaryOp::Neg;
                                        let expr1_0 = C::pack_value_array1(ctx, pattern9_1);
                                        let expr2_0 = InsnData::Unary {
                                            code: expr0_0,
                                            args: expr1_0,
                                        };
                                        let expr3_0 = SimplifyResult::Insn { data: expr2_0 };
                                        return Some(expr3_0);
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let pattern5_0 = C::is_zero(ctx, pattern4_1);
                if pattern5_0 == true {
                    // Rule at rules.isle line 92.
                    let expr0_0 = SimplifyResult::Value { val: pattern4_0 };
                    return Some(expr0_0);
                }
                if let Some(pattern5_0) = C::value_insn(ctx, pattern4_1) {
                    let pattern6_0 = C::insn_data(ctx, pattern5_0);
                    if let &InsnData::Binary {
                        code: ref pattern7_0,
                        args: ref pattern7_1,
                    } = &pattern6_0
                    {
                        match &pattern7_0 {
                            &BinaryOp::Add => {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern4_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern9_0, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 120.
                                        let expr0_0 = UnaryOp::Neg;
                                        let expr1_0 = C::pack_value_array1(ctx, pattern9_1);
                                        let expr2_0 = InsnData::Unary {
                                            code: expr0_0,
                                            args: expr1_0,
                                        };
                                        let expr3_0 = SimplifyResult::Insn { data: expr2_0 };
                                        return Some(expr3_0);
                                    }
                                }
                            }
                            &BinaryOp::Sub => {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_value_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern4_0);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_same(ctx, pattern9_0, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 106.
                                        let expr0_0 = SimplifyResult::Value { val: pattern9_1 };
                                        return Some(expr0_0);
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            &BinaryOp::Mul => {
                let (pattern4_0, pattern4_1) = C::unpack_value_array2(ctx, &pattern2_1);
                let pattern5_0 = C::is_zero(ctx, pattern4_0);
                if pattern5_0 == true {
                    let pattern7_0 = C::value_ty(ctx, pattern4_0);
                    // Rule at rules.isle line 143.
                    let expr0_0 = C::make_zero(ctx, &pattern7_0);
                    let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                    return Some(expr1_0);
                }
                let pattern5_0 = C::is_one(ctx, pattern4_0);
                if pattern5_0 == true {
                    // Rule at rules.isle line 157.
                    let expr0_0 = SimplifyResult::Value { val: pattern4_1 };
                    return Some(expr0_0);
                }
                let pattern5_0 = C::is_two(ctx, pattern4_0);
                if pattern5_0 == true {
                    // Rule at rules.isle line 171.
                    let expr0_0 = BinaryOp::Add;
                    let expr1_0 = C::pack_value_array2(ctx, pattern4_1, pattern4_1);
                    let expr2_0 = InsnData::Binary {
                        code: expr0_0,
                        args: expr1_0,
                    };
                    let expr3_0 = SimplifyResult::Insn { data: expr2_0 };
                    return Some(expr3_0);
                }
                let pattern5_0 = C::is_zero(ctx, pattern4_1);
                if pattern5_0 == true {
                    let pattern7_0 = C::value_ty(ctx, pattern4_1);
                    // Rule at rules.isle line 136.
                    let expr0_0 = C::make_zero(ctx, &pattern7_0);
                    let expr1_0 = SimplifyResult::Value { val: expr0_0 };
                    return Some(expr1_0);
                }
                let pattern5_0 = C::is_one(ctx, pattern4_1);
                if pattern5_0 == true {
                    // Rule at rules.isle line 150.
                    let expr0_0 = SimplifyResult::Value { val: pattern4_0 };
                    return Some(expr0_0);
                }
                let pattern5_0 = C::is_two(ctx, pattern4_1);
                if pattern5_0 == true {
                    // Rule at rules.isle line 164.
                    let expr0_0 = BinaryOp::Add;
                    let expr1_0 = C::pack_value_array2(ctx, pattern4_0, pattern4_0);
                    let expr2_0 = InsnData::Binary {
                        code: expr0_0,
                        args: expr1_0,
                    };
                    let expr3_0 = SimplifyResult::Insn { data: expr2_0 };
                    return Some(expr3_0);
                }
            }
            _ => {}
        }
    }
    return None;
}
