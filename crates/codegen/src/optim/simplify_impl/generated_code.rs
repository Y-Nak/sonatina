// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - expr.isle
// - rules.isle

#![allow(dead_code, unreachable_code, unreachable_patterns)]
#![allow(unused_imports, unused_variables, non_snake_case)]
#![allow(irrefutable_let_patterns)]

use super::*; // Pulls in all external types.

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unpack_arg_array1(&mut self, arg0: &ArgArray1) -> ExprValue;
    fn pack_arg_array1(&mut self, arg0: ExprValue) -> ArgArray1;
    fn unpack_arg_array2(&mut self, arg0: &ArgArray2) -> (ExprValue, ExprValue);
    fn pack_arg_array2(&mut self, arg0: ExprValue, arg1: ExprValue) -> ArgArray2;
    fn expr_data(&mut self, arg0: Expr) -> ExprData;
    fn value_ty(&mut self, arg0: ExprValue) -> Type;
    fn value_expr(&mut self, arg0: ExprValue) -> Option<Expr>;
    fn is_zero(&mut self, arg0: ExprValue) -> bool;
    fn is_one(&mut self, arg0: ExprValue) -> bool;
    fn is_two(&mut self, arg0: ExprValue) -> bool;
    fn is_all_one(&mut self, arg0: ExprValue) -> bool;
    fn is_eq(&mut self, arg0: ExprValue, arg1: ExprValue) -> bool;
    fn is_power_of_two(&mut self, arg0: ExprValue) -> bool;
    fn make_zero(&mut self, arg0: &Type) -> ExprValue;
    fn make_one(&mut self, arg0: &Type) -> ExprValue;
    fn make_all_one(&mut self, arg0: &Type) -> ExprValue;
    fn make_result(&mut self, arg0: ExprValue) -> SimplifyRawResult;
}

/// Internal type SimplifyRawResult: defined at rules.isle line 2.
#[derive(Clone, Debug)]
pub enum SimplifyRawResult {
    Value { val: Value },
    Expr { expr: ExprData },
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(ctx: &mut C, arg0: Expr) -> Option<SimplifyRawResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::expr_data(ctx, pattern0_0);
    match &pattern1_0 {
        &ExprData::Unary {
            code: ref pattern2_0,
            args: ref pattern2_1,
        } => {
            match &pattern2_0 {
                &UnaryOp::Not => {
                    let pattern4_0 = C::unpack_arg_array1(ctx, &pattern2_1);
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Unary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &UnaryOp::Not => {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    // Rule at rules.isle line 690.
                                    let expr0_0 = C::make_result(ctx, pattern9_0);
                                    return Some(expr0_0);
                                }
                                &UnaryOp::Neg => {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    let pattern10_0 = C::value_ty(ctx, pattern9_0);
                                    // Rule at rules.isle line 697.
                                    let expr0_0 = BinaryOp::Sub;
                                    let expr1_0 = C::make_one(ctx, &pattern10_0);
                                    let expr2_0 = C::pack_arg_array2(ctx, pattern9_0, expr1_0);
                                    let expr3_0 = ExprData::Binary {
                                        code: expr0_0,
                                        args: expr2_0,
                                    };
                                    let expr4_0 = SimplifyRawResult::Expr { expr: expr3_0 };
                                    return Some(expr4_0);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &UnaryOp::Neg => {
                    let pattern4_0 = C::unpack_arg_array1(ctx, &pattern2_1);
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Unary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &UnaryOp::Not => {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    let pattern10_0 = C::value_ty(ctx, pattern9_0);
                                    // Rule at rules.isle line 713.
                                    let expr0_0 = BinaryOp::Add;
                                    let expr1_0 = C::make_one(ctx, &pattern10_0);
                                    let expr2_0 = C::pack_arg_array2(ctx, pattern9_0, expr1_0);
                                    let expr3_0 = ExprData::Binary {
                                        code: expr0_0,
                                        args: expr2_0,
                                    };
                                    let expr4_0 = SimplifyRawResult::Expr { expr: expr3_0 };
                                    return Some(expr4_0);
                                }
                                &UnaryOp::Neg => {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    // Rule at rules.isle line 706.
                                    let expr0_0 = C::make_result(ctx, pattern9_0);
                                    return Some(expr0_0);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &ExprData::Binary {
            code: ref pattern2_0,
            args: ref pattern2_1,
        } => {
            match &pattern2_0 {
                &BinaryOp::Add => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            if let &BinaryOp::Sub = &pattern7_0 {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_arg_array2(ctx, &pattern7_1);
                                let closure10 = || {
                                    return Some(pattern9_1);
                                };
                                if let Some(pattern10_0) = closure10() {
                                    let pattern11_0 = C::is_eq(ctx, pattern4_1, pattern10_0);
                                    if pattern11_0 == true {
                                        // Rule at rules.isle line 70.
                                        let expr0_0 = C::make_result(ctx, pattern9_0);
                                        return Some(expr0_0);
                                    }
                                }
                            }
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 50.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_1) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        match &pattern6_0 {
                            &ExprData::Unary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                match &pattern7_0 {
                                    &UnaryOp::Not => {
                                        let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                                // Rule at rules.isle line 77.
                                                let expr0_0 = C::make_all_one(ctx, &pattern13_0);
                                                let expr1_0 = C::make_result(ctx, expr0_0);
                                                return Some(expr1_0);
                                            }
                                        }
                                    }
                                    &UnaryOp::Neg => {
                                        let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                                // Rule at rules.isle line 56.
                                                let expr0_0 = C::make_zero(ctx, &pattern13_0);
                                                let expr1_0 = C::make_result(ctx, expr0_0);
                                                return Some(expr1_0);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            &ExprData::Binary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                if let &BinaryOp::Sub = &pattern7_0 {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 63.
                                            let expr0_0 = C::make_result(ctx, pattern9_0);
                                            return Some(expr0_0);
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &BinaryOp::Sub => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 100.
                            let expr0_0 = C::make_zero(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_0);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 93.
                        let expr0_0 = UnaryOp::Neg;
                        let expr1_0 = C::pack_arg_array1(ctx, pattern4_1);
                        let expr2_0 = ExprData::Unary {
                            code: expr0_0,
                            args: expr1_0,
                        };
                        let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                        return Some(expr3_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &BinaryOp::Add => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern9_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern4_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 135.
                                            let expr0_0 = C::make_result(ctx, pattern9_1);
                                            return Some(expr0_0);
                                        }
                                    }
                                    let closure10 = || {
                                        return Some(pattern9_1);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern4_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 142.
                                            let expr0_0 = C::make_result(ctx, pattern9_0);
                                            return Some(expr0_0);
                                        }
                                    }
                                }
                                &BinaryOp::Sub => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern9_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern4_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 114.
                                            let expr0_0 = UnaryOp::Neg;
                                            let expr1_0 = C::pack_arg_array1(ctx, pattern9_1);
                                            let expr2_0 = ExprData::Unary {
                                                code: expr0_0,
                                                args: expr1_0,
                                            };
                                            let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 86.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_1) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &BinaryOp::Add => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 121.
                                            let expr0_0 = UnaryOp::Neg;
                                            let expr1_0 = C::pack_arg_array1(ctx, pattern9_1);
                                            let expr2_0 = ExprData::Unary {
                                                code: expr0_0,
                                                args: expr1_0,
                                            };
                                            let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                                            return Some(expr3_0);
                                        }
                                        let pattern11_0 = C::is_eq(ctx, pattern9_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 128.
                                            let expr0_0 = UnaryOp::Neg;
                                            let expr1_0 = C::pack_arg_array1(ctx, pattern9_0);
                                            let expr2_0 = ExprData::Unary {
                                                code: expr0_0,
                                                args: expr1_0,
                                            };
                                            let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                                &BinaryOp::Sub => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 107.
                                            let expr0_0 = C::make_result(ctx, pattern9_1);
                                            return Some(expr0_0);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &BinaryOp::Mul => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        let pattern7_0 = C::value_ty(ctx, pattern4_1);
                        // Rule at rules.isle line 151.
                        let expr0_0 = C::make_zero(ctx, &pattern7_0);
                        let expr1_0 = C::make_result(ctx, expr0_0);
                        return Some(expr1_0);
                    }
                    let pattern5_0 = C::is_one(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 158.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    let pattern5_0 = C::is_two(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 165.
                        let expr0_0 = BinaryOp::Add;
                        let expr1_0 = C::pack_arg_array2(ctx, pattern4_0, pattern4_0);
                        let expr2_0 = ExprData::Binary {
                            code: expr0_0,
                            args: expr1_0,
                        };
                        let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                        return Some(expr3_0);
                    }
                }
                &BinaryOp::Udiv => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let pattern5_0 = C::is_zero(ctx, pattern4_0);
                    if pattern5_0 == true {
                        let pattern7_0 = C::value_ty(ctx, pattern4_0);
                        // Rule at rules.isle line 185.
                        let expr0_0 = C::make_zero(ctx, &pattern7_0);
                        let expr1_0 = C::make_result(ctx, expr0_0);
                        return Some(expr1_0);
                    }
                }
                &BinaryOp::Sdiv => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let pattern5_0 = C::is_zero(ctx, pattern4_0);
                    if pattern5_0 == true {
                        let pattern7_0 = C::value_ty(ctx, pattern4_0);
                        // Rule at rules.isle line 175.
                        let expr0_0 = C::make_zero(ctx, &pattern7_0);
                        let expr1_0 = C::make_result(ctx, expr0_0);
                        return Some(expr1_0);
                    }
                }
                &BinaryOp::Lt => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 194.
                            let expr0_0 = C::make_all_one(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                }
                &BinaryOp::Gt => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    // Rule at rules.isle line 203.
                    let expr0_0 = BinaryOp::Lt;
                    let expr1_0 = C::pack_arg_array2(ctx, pattern4_1, pattern4_0);
                    let expr2_0 = ExprData::Binary {
                        code: expr0_0,
                        args: expr1_0,
                    };
                    let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                    return Some(expr3_0);
                }
                &BinaryOp::Slt => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 212.
                            let expr0_0 = C::make_all_one(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                }
                &BinaryOp::Sgt => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    // Rule at rules.isle line 221.
                    let expr0_0 = BinaryOp::Slt;
                    let expr1_0 = C::pack_arg_array2(ctx, pattern4_1, pattern4_0);
                    let expr2_0 = ExprData::Binary {
                        code: expr0_0,
                        args: expr1_0,
                    };
                    let expr3_0 = SimplifyRawResult::Expr { expr: expr2_0 };
                    return Some(expr3_0);
                }
                &BinaryOp::Eq => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 230.
                            let expr0_0 = C::make_all_one(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                }
                &BinaryOp::Ne => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 239.
                            let expr0_0 = C::make_zero(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                }
                &BinaryOp::And => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            // Rule at rules.isle line 248.
                            let expr0_0 = C::make_result(ctx, pattern4_0);
                            return Some(expr0_0);
                        }
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            if let &BinaryOp::Or = &pattern7_0 {
                                let (pattern9_0, pattern9_1) =
                                    C::unpack_arg_array2(ctx, &pattern7_1);
                                if let Some(pattern10_0) = C::value_expr(ctx, pattern4_1) {
                                    let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                    if let &ExprData::Binary {
                                        code: ref pattern12_0,
                                        args: ref pattern12_1,
                                    } = &pattern11_0
                                    {
                                        if let &BinaryOp::Or = &pattern12_0 {
                                            let (pattern14_0, pattern14_1) =
                                                C::unpack_arg_array2(ctx, &pattern12_1);
                                            let closure15 = || {
                                                return Some(pattern9_0);
                                            };
                                            if let Some(pattern15_0) = closure15() {
                                                let pattern16_0 =
                                                    C::is_eq(ctx, pattern14_0, pattern15_0);
                                                if pattern16_0 == true {
                                                    if let Some(pattern18_0) =
                                                        C::value_expr(ctx, pattern14_1)
                                                    {
                                                        let pattern19_0 =
                                                            C::expr_data(ctx, pattern18_0);
                                                        if let &ExprData::Unary {
                                                            code: ref pattern20_0,
                                                            args: ref pattern20_1,
                                                        } = &pattern19_0
                                                        {
                                                            if let &UnaryOp::Not = &pattern20_0 {
                                                                let pattern22_0 =
                                                                    C::unpack_arg_array1(
                                                                        ctx,
                                                                        &pattern20_1,
                                                                    );
                                                                let closure23 = || {
                                                                    return Some(pattern9_1);
                                                                };
                                                                if let Some(pattern23_0) =
                                                                    closure23()
                                                                {
                                                                    let pattern24_0 = C::is_eq(
                                                                        ctx,
                                                                        pattern22_0,
                                                                        pattern23_0,
                                                                    );
                                                                    if pattern24_0 == true {
                                                                        // Rule at rules.isle line 290.
                                                                        let expr0_0 =
                                                                            C::make_result(
                                                                                ctx, pattern9_0,
                                                                            );
                                                                        return Some(expr0_0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let closure15 = || {
                                                return Some(pattern9_1);
                                            };
                                            if let Some(pattern15_0) = closure15() {
                                                let pattern16_0 =
                                                    C::is_eq(ctx, pattern14_0, pattern15_0);
                                                if pattern16_0 == true {
                                                    if let Some(pattern18_0) =
                                                        C::value_expr(ctx, pattern14_1)
                                                    {
                                                        let pattern19_0 =
                                                            C::expr_data(ctx, pattern18_0);
                                                        if let &ExprData::Unary {
                                                            code: ref pattern20_0,
                                                            args: ref pattern20_1,
                                                        } = &pattern19_0
                                                        {
                                                            if let &UnaryOp::Not = &pattern20_0 {
                                                                let pattern22_0 =
                                                                    C::unpack_arg_array1(
                                                                        ctx,
                                                                        &pattern20_1,
                                                                    );
                                                                let closure23 = || {
                                                                    return Some(pattern9_0);
                                                                };
                                                                if let Some(pattern23_0) =
                                                                    closure23()
                                                                {
                                                                    let pattern24_0 = C::is_eq(
                                                                        ctx,
                                                                        pattern22_0,
                                                                        pattern23_0,
                                                                    );
                                                                    if pattern24_0 == true {
                                                                        // Rule at rules.isle line 326.
                                                                        let expr0_0 =
                                                                            C::make_result(
                                                                                ctx, pattern9_1,
                                                                            );
                                                                        return Some(expr0_0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if let Some(pattern15_0) =
                                                C::value_expr(ctx, pattern14_0)
                                            {
                                                let pattern16_0 = C::expr_data(ctx, pattern15_0);
                                                if let &ExprData::Unary {
                                                    code: ref pattern17_0,
                                                    args: ref pattern17_1,
                                                } = &pattern16_0
                                                {
                                                    if let &UnaryOp::Not = &pattern17_0 {
                                                        let pattern19_0 =
                                                            C::unpack_arg_array1(ctx, &pattern17_1);
                                                        let closure20 = || {
                                                            return Some(pattern9_0);
                                                        };
                                                        if let Some(pattern20_0) = closure20() {
                                                            let pattern21_0 = C::is_eq(
                                                                ctx,
                                                                pattern19_0,
                                                                pattern20_0,
                                                            );
                                                            if pattern21_0 == true {
                                                                let closure23 = || {
                                                                    return Some(pattern9_1);
                                                                };
                                                                if let Some(pattern23_0) =
                                                                    closure23()
                                                                {
                                                                    let pattern24_0 = C::is_eq(
                                                                        ctx,
                                                                        pattern14_1,
                                                                        pattern23_0,
                                                                    );
                                                                    if pattern24_0 == true {
                                                                        // Rule at rules.isle line 314.
                                                                        let expr0_0 =
                                                                            C::make_result(
                                                                                ctx, pattern9_1,
                                                                            );
                                                                        return Some(expr0_0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        let closure20 = || {
                                                            return Some(pattern9_1);
                                                        };
                                                        if let Some(pattern20_0) = closure20() {
                                                            let pattern21_0 = C::is_eq(
                                                                ctx,
                                                                pattern19_0,
                                                                pattern20_0,
                                                            );
                                                            if pattern21_0 == true {
                                                                let closure23 = || {
                                                                    return Some(pattern9_0);
                                                                };
                                                                if let Some(pattern23_0) =
                                                                    closure23()
                                                                {
                                                                    let pattern24_0 = C::is_eq(
                                                                        ctx,
                                                                        pattern14_1,
                                                                        pattern23_0,
                                                                    );
                                                                    if pattern24_0 == true {
                                                                        // Rule at rules.isle line 302.
                                                                        let expr0_0 =
                                                                            C::make_result(
                                                                                ctx, pattern9_0,
                                                                            );
                                                                        return Some(expr0_0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        let pattern7_0 = C::value_ty(ctx, pattern4_1);
                        // Rule at rules.isle line 255.
                        let expr0_0 = C::make_zero(ctx, &pattern7_0);
                        let expr1_0 = C::make_result(ctx, expr0_0);
                        return Some(expr1_0);
                    }
                    let pattern5_0 = C::is_all_one(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 262.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_1) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        match &pattern6_0 {
                            &ExprData::Unary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                match &pattern7_0 {
                                    &UnaryOp::Not => {
                                        let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                                // Rule at rules.isle line 269.
                                                let expr0_0 = C::make_zero(ctx, &pattern13_0);
                                                let expr1_0 = C::make_result(ctx, expr0_0);
                                                return Some(expr1_0);
                                            }
                                        }
                                    }
                                    &UnaryOp::Neg => {
                                        let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                let pattern13_0 =
                                                    C::is_power_of_two(ctx, pattern9_0);
                                                if pattern13_0 == true {
                                                    // Rule at rules.isle line 338.
                                                    let expr0_0 = C::make_result(ctx, pattern4_0);
                                                    return Some(expr0_0);
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            &ExprData::Binary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                match &pattern7_0 {
                                    &BinaryOp::Sub => {
                                        let (pattern9_0, pattern9_1) =
                                            C::unpack_arg_array2(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                let pattern13_0 =
                                                    C::is_power_of_two(ctx, pattern9_0);
                                                if pattern13_0 == true {
                                                    let pattern15_0 = C::value_ty(ctx, pattern9_0);
                                                    let pattern16_0 = C::is_one(ctx, pattern9_1);
                                                    if pattern16_0 == true {
                                                        // Rule at rules.isle line 345.
                                                        let expr0_0 =
                                                            C::make_zero(ctx, &pattern15_0);
                                                        let expr1_0 = C::make_result(ctx, expr0_0);
                                                        return Some(expr1_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &BinaryOp::Or => {
                                        let (pattern9_0, pattern9_1) =
                                            C::unpack_arg_array2(ctx, &pattern7_1);
                                        let closure10 = || {
                                            return Some(pattern4_0);
                                        };
                                        if let Some(pattern10_0) = closure10() {
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_0, pattern10_0);
                                            if pattern11_0 == true {
                                                // Rule at rules.isle line 276.
                                                let expr0_0 = C::make_result(ctx, pattern4_0);
                                                return Some(expr0_0);
                                            }
                                            let pattern11_0 =
                                                C::is_eq(ctx, pattern9_1, pattern10_0);
                                            if pattern11_0 == true {
                                                // Rule at rules.isle line 283.
                                                let expr0_0 = C::make_result(ctx, pattern4_0);
                                                return Some(expr0_0);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &BinaryOp::Or => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            // Rule at rules.isle line 361.
                            let expr0_0 = C::make_result(ctx, pattern4_0);
                            return Some(expr0_0);
                        }
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &BinaryOp::And => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern9_0) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Unary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &UnaryOp::Not = &pattern12_0 {
                                                let pattern14_0 =
                                                    C::unpack_arg_array1(ctx, &pattern12_1);
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern4_1)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Unary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &UnaryOp::Not = &pattern17_0 {
                                                            let pattern19_0 = C::unpack_arg_array1(
                                                                ctx,
                                                                &pattern17_1,
                                                            );
                                                            if let Some(pattern20_0) =
                                                                C::value_expr(ctx, pattern19_0)
                                                            {
                                                                let pattern21_0 =
                                                                    C::expr_data(ctx, pattern20_0);
                                                                if let &ExprData::Binary {
                                                                    code: ref pattern22_0,
                                                                    args: ref pattern22_1,
                                                                } = &pattern21_0
                                                                {
                                                                    if let &BinaryOp::Or =
                                                                        &pattern22_0
                                                                    {
                                                                        let (
                                                                            pattern24_0,
                                                                            pattern24_1,
                                                                        ) = C::unpack_arg_array2(
                                                                            ctx,
                                                                            &pattern22_1,
                                                                        );
                                                                        let closure25 = || {
                                                                            return Some(
                                                                                pattern9_1,
                                                                            );
                                                                        };
                                                                        if let Some(pattern25_0) =
                                                                            closure25()
                                                                        {
                                                                            let pattern26_0 =
                                                                                C::is_eq(
                                                                                    ctx,
                                                                                    pattern24_0,
                                                                                    pattern25_0,
                                                                                );
                                                                            if pattern26_0 == true {
                                                                                let closure28 =
                                                                                    || {
                                                                                        return Some(pattern14_0);
                                                                                    };
                                                                                if let Some(
                                                                                    pattern28_0,
                                                                                ) = closure28()
                                                                                {
                                                                                    let pattern29_0 = C::is_eq(ctx, pattern24_1, pattern28_0);
                                                                                    if pattern29_0
                                                                                        == true
                                                                                    {
                                                                                        // Rule at rules.isle line 540.
                                                                                        let expr0_0 = C::make_result(ctx, pattern9_0);
                                                                                        return Some(expr0_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let closure25 = || {
                                                                            return Some(
                                                                                pattern14_0,
                                                                            );
                                                                        };
                                                                        if let Some(pattern25_0) =
                                                                            closure25()
                                                                        {
                                                                            let pattern26_0 =
                                                                                C::is_eq(
                                                                                    ctx,
                                                                                    pattern24_0,
                                                                                    pattern25_0,
                                                                                );
                                                                            if pattern26_0 == true {
                                                                                let closure28 =
                                                                                    || {
                                                                                        return Some(pattern9_1);
                                                                                    };
                                                                                if let Some(
                                                                                    pattern28_0,
                                                                                ) = closure28()
                                                                                {
                                                                                    let pattern29_0 = C::is_eq(ctx, pattern24_1, pattern28_0);
                                                                                    if pattern29_0
                                                                                        == true
                                                                                    {
                                                                                        // Rule at rules.isle line 530.
                                                                                        let expr0_0 = C::make_result(ctx, pattern9_0);
                                                                                        return Some(expr0_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern9_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Unary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &UnaryOp::Not = &pattern12_0 {
                                                let pattern14_0 =
                                                    C::unpack_arg_array1(ctx, &pattern12_1);
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern4_1)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Unary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &UnaryOp::Not = &pattern17_0 {
                                                            let pattern19_0 = C::unpack_arg_array1(
                                                                ctx,
                                                                &pattern17_1,
                                                            );
                                                            if let Some(pattern20_0) =
                                                                C::value_expr(ctx, pattern19_0)
                                                            {
                                                                let pattern21_0 =
                                                                    C::expr_data(ctx, pattern20_0);
                                                                if let &ExprData::Binary {
                                                                    code: ref pattern22_0,
                                                                    args: ref pattern22_1,
                                                                } = &pattern21_0
                                                                {
                                                                    if let &BinaryOp::Or =
                                                                        &pattern22_0
                                                                    {
                                                                        let (
                                                                            pattern24_0,
                                                                            pattern24_1,
                                                                        ) = C::unpack_arg_array2(
                                                                            ctx,
                                                                            &pattern22_1,
                                                                        );
                                                                        let closure25 = || {
                                                                            return Some(
                                                                                pattern9_0,
                                                                            );
                                                                        };
                                                                        if let Some(pattern25_0) =
                                                                            closure25()
                                                                        {
                                                                            let pattern26_0 =
                                                                                C::is_eq(
                                                                                    ctx,
                                                                                    pattern24_0,
                                                                                    pattern25_0,
                                                                                );
                                                                            if pattern26_0 == true {
                                                                                let closure28 =
                                                                                    || {
                                                                                        return Some(pattern14_0);
                                                                                    };
                                                                                if let Some(
                                                                                    pattern28_0,
                                                                                ) = closure28()
                                                                                {
                                                                                    let pattern29_0 = C::is_eq(ctx, pattern24_1, pattern28_0);
                                                                                    if pattern29_0
                                                                                        == true
                                                                                    {
                                                                                        // Rule at rules.isle line 550.
                                                                                        let expr0_0 = C::make_result(ctx, pattern9_1);
                                                                                        return Some(expr0_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let closure25 = || {
                                                                            return Some(
                                                                                pattern14_0,
                                                                            );
                                                                        };
                                                                        if let Some(pattern25_0) =
                                                                            closure25()
                                                                        {
                                                                            let pattern26_0 =
                                                                                C::is_eq(
                                                                                    ctx,
                                                                                    pattern24_0,
                                                                                    pattern25_0,
                                                                                );
                                                                            if pattern26_0 == true {
                                                                                let closure28 =
                                                                                    || {
                                                                                        return Some(pattern9_0);
                                                                                    };
                                                                                if let Some(
                                                                                    pattern28_0,
                                                                                ) = closure28()
                                                                                {
                                                                                    let pattern29_0 = C::is_eq(ctx, pattern24_1, pattern28_0);
                                                                                    if pattern29_0
                                                                                        == true
                                                                                    {
                                                                                        // Rule at rules.isle line 560.
                                                                                        let expr0_0 = C::make_result(ctx, pattern9_1);
                                                                                        return Some(expr0_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &BinaryOp::Or => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern4_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Binary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &BinaryOp::Xor = &pattern12_0 {
                                                let (pattern14_0, pattern14_1) =
                                                    C::unpack_arg_array2(ctx, &pattern12_1);
                                                let closure15 = || {
                                                    return Some(pattern9_0);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        let closure18 = || {
                                                            return Some(pattern9_1);
                                                        };
                                                        if let Some(pattern18_0) = closure18() {
                                                            let pattern19_0 = C::is_eq(
                                                                ctx,
                                                                pattern14_1,
                                                                pattern18_0,
                                                            );
                                                            if pattern19_0 == true {
                                                                // Rule at rules.isle line 506.
                                                                let expr0_0 =
                                                                    C::make_result(ctx, pattern4_0);
                                                                return Some(expr0_0);
                                                            }
                                                        }
                                                    }
                                                }
                                                let closure15 = || {
                                                    return Some(pattern9_1);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        let closure18 = || {
                                                            return Some(pattern9_0);
                                                        };
                                                        if let Some(pattern18_0) = closure18() {
                                                            let pattern19_0 = C::is_eq(
                                                                ctx,
                                                                pattern14_1,
                                                                pattern18_0,
                                                            );
                                                            if pattern19_0 == true {
                                                                // Rule at rules.isle line 518.
                                                                let expr0_0 =
                                                                    C::make_result(ctx, pattern4_0);
                                                                return Some(expr0_0);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &BinaryOp::Xor => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern4_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Binary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &BinaryOp::And = &pattern12_0 {
                                                let (pattern14_0, pattern14_1) =
                                                    C::unpack_arg_array2(ctx, &pattern12_1);
                                                let closure15 = || {
                                                    return Some(pattern9_0);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 410.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let closure15 = || {
                                                    return Some(pattern9_1);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 446.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern14_0)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Unary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &UnaryOp::Not = &pattern17_0 {
                                                            let pattern19_0 = C::unpack_arg_array1(
                                                                ctx,
                                                                &pattern17_1,
                                                            );
                                                            let closure20 = || {
                                                                return Some(pattern9_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 434.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let closure20 = || {
                                                                return Some(pattern9_1);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 422.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern9_0) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Unary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &UnaryOp::Not = &pattern12_0 {
                                                let pattern14_0 =
                                                    C::unpack_arg_array1(ctx, &pattern12_1);
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern4_1)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Binary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &BinaryOp::And = &pattern17_0 {
                                                            let (pattern19_0, pattern19_1) =
                                                                C::unpack_arg_array2(
                                                                    ctx,
                                                                    &pattern17_1,
                                                                );
                                                            let closure20 = || {
                                                                return Some(pattern9_1);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern14_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern19_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 470.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let closure20 = || {
                                                                return Some(pattern14_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern19_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 458.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern9_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Unary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &UnaryOp::Not = &pattern12_0 {
                                                let pattern14_0 =
                                                    C::unpack_arg_array1(ctx, &pattern12_1);
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern4_1)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Binary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &BinaryOp::And = &pattern17_0 {
                                                            let (pattern19_0, pattern19_1) =
                                                                C::unpack_arg_array2(
                                                                    ctx,
                                                                    &pattern17_1,
                                                                );
                                                            let closure20 = || {
                                                                return Some(pattern9_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern14_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern19_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 482.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let closure20 = || {
                                                                return Some(pattern14_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern19_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 494.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern4_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 368.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    let pattern5_0 = C::is_all_one(ctx, pattern4_1);
                    if pattern5_0 == true {
                        let pattern7_0 = C::value_ty(ctx, pattern4_1);
                        // Rule at rules.isle line 354.
                        let expr0_0 = C::make_all_one(ctx, &pattern7_0);
                        let expr1_0 = C::make_result(ctx, expr0_0);
                        return Some(expr1_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_1) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        match &pattern6_0 {
                            &ExprData::Unary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                if let &UnaryOp::Not = &pattern7_0 {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            let pattern13_0 = C::value_ty(ctx, pattern9_0);
                                            // Rule at rules.isle line 375.
                                            let expr0_0 = C::make_all_one(ctx, &pattern13_0);
                                            let expr1_0 = C::make_result(ctx, expr0_0);
                                            return Some(expr1_0);
                                        }
                                    }
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern9_0) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Binary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &BinaryOp::And = &pattern12_0 {
                                                let (pattern14_0, pattern14_1) =
                                                    C::unpack_arg_array2(ctx, &pattern12_1);
                                                let closure15 = || {
                                                    return Some(pattern4_0);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        let pattern18_0 =
                                                            C::value_ty(ctx, pattern14_0);
                                                        // Rule at rules.isle line 396.
                                                        let expr0_0 =
                                                            C::make_all_one(ctx, &pattern18_0);
                                                        let expr1_0 = C::make_result(ctx, expr0_0);
                                                        return Some(expr1_0);
                                                    }
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_1, pattern15_0);
                                                    if pattern16_0 == true {
                                                        let pattern18_0 =
                                                            C::value_ty(ctx, pattern14_1);
                                                        // Rule at rules.isle line 403.
                                                        let expr0_0 =
                                                            C::make_all_one(ctx, &pattern18_0);
                                                        let expr1_0 = C::make_result(ctx, expr0_0);
                                                        return Some(expr1_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &ExprData::Binary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                if let &BinaryOp::And = &pattern7_0 {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 382.
                                            let expr0_0 = C::make_result(ctx, pattern4_0);
                                            return Some(expr0_0);
                                        }
                                        let pattern11_0 = C::is_eq(ctx, pattern9_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 389.
                                            let expr0_0 = C::make_result(ctx, pattern4_0);
                                            return Some(expr0_0);
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &BinaryOp::Xor => {
                    let (pattern4_0, pattern4_1) = C::unpack_arg_array2(ctx, &pattern2_1);
                    let closure5 = || {
                        return Some(pattern4_0);
                    };
                    if let Some(pattern5_0) = closure5() {
                        let pattern6_0 = C::is_eq(ctx, pattern4_1, pattern5_0);
                        if pattern6_0 == true {
                            let pattern8_0 = C::value_ty(ctx, pattern4_1);
                            // Rule at rules.isle line 579.
                            let expr0_0 = C::make_zero(ctx, &pattern8_0);
                            let expr1_0 = C::make_result(ctx, expr0_0);
                            return Some(expr1_0);
                        }
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_0) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        if let &ExprData::Binary {
                            code: ref pattern7_0,
                            args: ref pattern7_1,
                        } = &pattern6_0
                        {
                            match &pattern7_0 {
                                &BinaryOp::And => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern4_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Binary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &BinaryOp::Or = &pattern12_0 {
                                                let (pattern14_0, pattern14_1) =
                                                    C::unpack_arg_array2(ctx, &pattern12_1);
                                                let closure15 = || {
                                                    return Some(pattern9_0);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 668.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx,
                                                                                    pattern14_1,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let closure15 = || {
                                                    return Some(pattern9_1);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 658.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx,
                                                                                    pattern14_1,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern14_0)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Unary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &UnaryOp::Not = &pattern17_0 {
                                                            let pattern19_0 = C::unpack_arg_array1(
                                                                ctx,
                                                                &pattern17_1,
                                                            );
                                                            let closure20 = || {
                                                                return Some(pattern9_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 648.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx,
                                                                                    pattern14_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let closure20 = || {
                                                                return Some(pattern9_1);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 678.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx,
                                                                                    pattern14_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &BinaryOp::Or => {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    if let Some(pattern10_0) = C::value_expr(ctx, pattern4_1) {
                                        let pattern11_0 = C::expr_data(ctx, pattern10_0);
                                        if let &ExprData::Binary {
                                            code: ref pattern12_0,
                                            args: ref pattern12_1,
                                        } = &pattern11_0
                                        {
                                            if let &BinaryOp::And = &pattern12_0 {
                                                let (pattern14_0, pattern14_1) =
                                                    C::unpack_arg_array2(ctx, &pattern12_1);
                                                let closure15 = || {
                                                    return Some(pattern9_0);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 627.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern9_1,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let closure15 = || {
                                                    return Some(pattern9_1);
                                                };
                                                if let Some(pattern15_0) = closure15() {
                                                    let pattern16_0 =
                                                        C::is_eq(ctx, pattern14_0, pattern15_0);
                                                    if pattern16_0 == true {
                                                        if let Some(pattern18_0) =
                                                            C::value_expr(ctx, pattern14_1)
                                                        {
                                                            let pattern19_0 =
                                                                C::expr_data(ctx, pattern18_0);
                                                            if let &ExprData::Unary {
                                                                code: ref pattern20_0,
                                                                args: ref pattern20_1,
                                                            } = &pattern19_0
                                                            {
                                                                if let &UnaryOp::Not = &pattern20_0
                                                                {
                                                                    let pattern22_0 =
                                                                        C::unpack_arg_array1(
                                                                            ctx,
                                                                            &pattern20_1,
                                                                        );
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern22_0,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 617.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern9_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if let Some(pattern15_0) =
                                                    C::value_expr(ctx, pattern14_0)
                                                {
                                                    let pattern16_0 =
                                                        C::expr_data(ctx, pattern15_0);
                                                    if let &ExprData::Unary {
                                                        code: ref pattern17_0,
                                                        args: ref pattern17_1,
                                                    } = &pattern16_0
                                                    {
                                                        if let &UnaryOp::Not = &pattern17_0 {
                                                            let pattern19_0 = C::unpack_arg_array1(
                                                                ctx,
                                                                &pattern17_1,
                                                            );
                                                            let closure20 = || {
                                                                return Some(pattern9_0);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_1);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 607.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern9_0,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let closure20 = || {
                                                                return Some(pattern9_1);
                                                            };
                                                            if let Some(pattern20_0) = closure20() {
                                                                let pattern21_0 = C::is_eq(
                                                                    ctx,
                                                                    pattern19_0,
                                                                    pattern20_0,
                                                                );
                                                                if pattern21_0 == true {
                                                                    let closure23 = || {
                                                                        return Some(pattern9_0);
                                                                    };
                                                                    if let Some(pattern23_0) =
                                                                        closure23()
                                                                    {
                                                                        let pattern24_0 = C::is_eq(
                                                                            ctx,
                                                                            pattern14_1,
                                                                            pattern23_0,
                                                                        );
                                                                        if pattern24_0 == true {
                                                                            // Rule at rules.isle line 637.
                                                                            let expr0_0 =
                                                                                C::make_result(
                                                                                    ctx, pattern9_1,
                                                                                );
                                                                            return Some(expr0_0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let pattern5_0 = C::is_zero(ctx, pattern4_1);
                    if pattern5_0 == true {
                        // Rule at rules.isle line 572.
                        let expr0_0 = C::make_result(ctx, pattern4_0);
                        return Some(expr0_0);
                    }
                    if let Some(pattern5_0) = C::value_expr(ctx, pattern4_1) {
                        let pattern6_0 = C::expr_data(ctx, pattern5_0);
                        match &pattern6_0 {
                            &ExprData::Unary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                if let &UnaryOp::Not = &pattern7_0 {
                                    let pattern9_0 = C::unpack_arg_array1(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            let pattern13_0 = C::value_ty(ctx, pattern4_1);
                                            // Rule at rules.isle line 586.
                                            let expr0_0 = C::make_all_one(ctx, &pattern13_0);
                                            let expr1_0 = C::make_result(ctx, expr0_0);
                                            return Some(expr1_0);
                                        }
                                    }
                                }
                            }
                            &ExprData::Binary {
                                code: ref pattern7_0,
                                args: ref pattern7_1,
                            } => {
                                if let &BinaryOp::Xor = &pattern7_0 {
                                    let (pattern9_0, pattern9_1) =
                                        C::unpack_arg_array2(ctx, &pattern7_1);
                                    let closure10 = || {
                                        return Some(pattern4_0);
                                    };
                                    if let Some(pattern10_0) = closure10() {
                                        let pattern11_0 = C::is_eq(ctx, pattern9_0, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 593.
                                            let expr0_0 = C::make_result(ctx, pattern9_1);
                                            return Some(expr0_0);
                                        }
                                        let pattern11_0 = C::is_eq(ctx, pattern9_1, pattern10_0);
                                        if pattern11_0 == true {
                                            // Rule at rules.isle line 600.
                                            let expr0_0 = C::make_result(ctx, pattern9_0);
                                            return Some(expr0_0);
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    return None;
}
