(type
  SimplifyRawResult
    (enum
      (Value (val Value))
      (Expr (expr ExprData))
    )
)


(extern const $true bool)
(extern const $false bool)

(decl is_zero (bool) ExprValue)
(extern extractor infallible is_zero is_zero)

(decl is_one (bool) ExprValue)
(extern extractor infallible is_one is_one)

(decl is_two (bool) ExprValue)
(extern extractor infallible is_two is_two)

(decl is_all_one (bool) ExprValue)
(extern extractor infallible is_all_one is_all_one)


(decl is_power_of_two (bool) ExprValue)
(extern extractor infallible is_power_of_two is_power_of_two)

(decl pure is_eq (ExprValue ExprValue) Unit)
(extern constructor is_eq is_eq)

(decl make_zero (Type) ExprValue)
(extern constructor make_zero make_zero)

(decl make_one (Type) ExprValue)
(extern constructor make_one make_one)

(decl make_true () ExprValue)
(extern constructor make_true make_true)

(decl make_false () ExprValue)
(extern constructor make_false make_false)

(decl make_all_one (Type) ExprValue)
(extern constructor make_all_one make_all_one)

(decl make_result (ExprValue) SimplifyRawResult)
(extern constructor make_result make_result)


;; Insn Simplify rule ;;
(decl simplify (Expr) SimplifyRawResult)

;; Rules for BinaryOp.Add ;;
; a + 0 => a
(rule
  (simplify
    (extract_add a (is_zero $true)))
  (make_result a)
)
; a + (-b) => 0 where a == b
(rule 2
  (simplify
    (extract_add a (value_expr (extract_neg (value_with_ty b ty))))
  )
  (if (is_eq a b))
  (make_result (make_zero ty))
)
; a + (b - c) => b where a == c
(rule 2
  (simplify
    (extract_add a (value_expr (extract_sub b c)))
  )
  (if (is_eq a c))
  (make_result b)
)
; a + !b => -1  where a == b
(rule 2
  (simplify
    (extract_add a (value_expr (extract_not (value_with_ty b ty))))
  )
  (if (is_eq a b))
  (make_result (make_all_one ty))
)
; (a - b) + c => a where a == c
(rule 3
  (simplify
    (extract_add (value_expr (extract_sub a b)) c)
  )
  (if (is_eq a c))
  (make_result a)
)

;;; Rules for BinaryOp.Sub ;;
; a - b => 0 where a == b
(rule 
  (simplify
    (extract_sub a (value_with_ty b ty))
  )
  (if (is_eq a b))
  (make_result (make_zero ty))
)
; a - 0 => a
(rule 2
  (simplify
    (extract_sub a (is_zero $true))
  )
  (make_result a)
)
; 0 - a => -a
(rule 3
  (simplify
    (extract_sub (is_zero $true) a)
  )
  (SimplifyRawResult.Expr (ExprData.Unary (UnaryOp.Neg) (arg_array1 a)))
)
; a - (b - c) =>  c where a == b
(rule 4
  (simplify
    (extract_sub a (value_expr (extract_sub b c)))
  )
  (if (is_eq a b))
  (make_result c)
)
; a - (b + c) => -c where a == b
(rule 4
  (simplify
    (extract_sub a (value_expr (extract_add b c)))
  )
  (if (is_eq a b))
  (SimplifyRawResult.Expr (ExprData.Unary (UnaryOp.Neg) (arg_array1 c))) 
)
; (a - b) - c => -b where a == c
(rule 5
  (simplify
    (extract_sub (value_expr (extract_sub a b)) c)
  )
  (if (is_eq a c))
  (SimplifyRawResult.Expr (ExprData.Unary (UnaryOp.Neg) (arg_array1 b)))
)
; (a + b) - c => b where a == c
(rule 5
  (simplify
    (extract_sub (value_expr (extract_add a b)) c)
  )
  (if (is_eq a c))
  (make_result b)
)
; b - (a + c) => -a where b == c
(rule 6
  (simplify
    (extract_sub b (value_expr (extract_add a c)))
  )
  (if (is_eq b c))
  (SimplifyRawResult.Expr (ExprData.Unary (UnaryOp.Neg) (arg_array1 a)))
)
; (a + b) - c =>  a where b == c
(rule 7
  (simplify
    (extract_sub (value_expr (extract_add a b)) c)
  )
  (if (is_eq b c))
  (make_result a)
)

;; Rules for BinaryOp.Mul ;;
; _ * 0 => 0
(rule
  (simplify
    (extract_mul _ (value_with_ty (is_zero $true) ty))
  )
  (make_result (make_zero ty))
)
; a * 1 => a
(rule 2
  (simplify
    (extract_mul a (is_one $true))
  )
  (make_result a)
)
;; a * 2 => a + a
(rule 3
  (simplify
    (extract_mul a (is_two $true))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Add) (arg_array2 a a)))
)

;; Rules for BinaryOp.Sdiv ;;
; 0 / a => 0
(rule
  (simplify
    (extract_sdiv (value_with_ty (is_zero $true) ty) _)
  )
  (make_result (make_zero ty))
)

;; Rules for BinaryOp.Udiv ;;
; 0 / a => 0
(rule
  (simplify
    (extract_udiv (value_with_ty (is_zero $true) ty) _)
  )
  (make_result (make_zero ty))
)

;; Rules for BinaryOp.Eq
; a == b => true where a == b
(rule
  (simplify
    (extract_eq a b)
  )
  (if (is_eq a b))
  (make_result (make_true))
)

;; Rules for BinaryOp.Ne
; a != b => false where a == b
(rule
  (simplify
    (extract_ne a b)
  )
  (if (is_eq a b))
  (make_result (make_false))
)
;
;
;; Rules for BinaryOp.Lt
; a < b => false where a == b
(rule
  (simplify
    (extract_lt a b)
  )
  (if (is_eq a b))
  (make_result (make_false))
)

;; Rules for BinaryOp.Gt
; a > b => b < a
(rule
  (simplify
    (extract_gt a b)
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Lt) (arg_array2 b a)))
)

;; Rules for BinaryOp.Slt
; a < b => false where a == b
(rule
  (simplify
    (extract_slt a b)
  )
  (if (is_eq a b))
  (make_result (make_false))
)

;; Rules for BinaryOp.Sgt
; a > b => b < a
(rule
  (simplify
    (extract_sgt a b)
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Slt) (arg_array2 b a)))
)

;; Rules for BinaryOp.Le
; a <= b => true where a == b
(rule
  (simplify
    (extract_le a b)
  )
  (if (is_eq a b))
  (make_result (make_true))
)

;; Rules for BinaryOp.Ge
; a >= b => b <= a
(rule
  (simplify
    (extract_ge a b)
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Le) (arg_array2 b a)))
)

;; Rules for BinaryOp.Sle
; a <= b => true where a == b
(rule
  (simplify
    (extract_sle a b)
  )
  (if (is_eq a b))
  (make_result (make_true))
)

;; Rules for BinaryOp.Sge
; a <= b => b <= a
(rule
  (simplify
    (extract_sge a b)
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Sle) (arg_array2 b a)))
)

;; Rules for BinaryOp.And
; _ & 0 => 0
(rule
  (simplify
    (extract_and _ (value_with_ty (is_zero $true) ty))
  )
  (make_result (make_zero ty))
)
; a & -1 => a
(rule 2
  (simplify
    (extract_and a (is_all_one $true))
  )
  (make_result a)
)
; a & b => a where a == b
(rule 3
  (simplify
    (extract_and a b)
  )
  (if (is_eq a b))
  (make_result a)
)
; a & !b => 0 where a == b
(rule 4
  (simplify
    (extract_and a (value_expr (extract_not (value_with_ty b ty))))
  )
  (if (is_eq a b))
  (make_result (make_zero ty))
)
; a & (b | _) => a where a == b
(rule 4
  (simplify
    (extract_and a (value_expr (extract_or b _)))
  )
  (if (is_eq a b))
  (make_result a)
)
; a & (_ | b) => a where a == b
(rule 5
  (simplify
    (extract_and a (value_expr (extract_or _ b)))
  )
  (if (is_eq a b))
  (make_result a)
)
;; (a | b) & (c | !d) => a where a == c, b == d
(rule 6
  (simplify
    (extract_and
      (value_expr (extract_or a b))
      (value_expr (extract_or c (value_expr (extract_not d))))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result a)
)
;; (a | b) & (!c | d) => a where a == d, b == c
(rule 7
  (simplify
    (extract_and
      (value_expr (extract_or a b))
      (value_expr (extract_or (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result a)
)
; (a | b) & (!c | d) => b where a == c, b == d
(rule 8
  (simplify
    (extract_and
      (value_expr (extract_or a b))
      (value_expr (extract_or (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result b)
)

; (a | b) & (c | !d) => b where a == d, b == c
(rule 9
  (simplify
    (extract_and
      (value_expr (extract_or a b))
      (value_expr
        (extract_or c (value_expr (extract_not d)))
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result b)
)
; a & (-b) => a where a: is_power_of_two, a == b
(rule 10
  (simplify
    (extract_and a (value_expr (extract_neg (and b (is_power_of_two $true)))))
  )
  (if (is_eq a b))
  (make_result a)
)
; a & (b - 1) => 0 where a: is_power_of_two, a == b
(rule 11
  (simplify
    (extract_and a (value_expr (extract_sub (and b (is_power_of_two $true) (value_ty ty)) (is_one $true))))
  )
  (if (is_eq a b))
  (make_result (make_zero ty))
)

;; Rules for BinaryOp.Or
; a | -1 => -1
(rule
  (simplify
    (extract_or a (value_with_ty (is_all_one $true) ty))
  )
  (make_result (make_all_one ty))
)
; a | b => a where a == b
(rule 2
  (simplify
    (extract_or a b)
  )
  (if (is_eq a b))
  (make_result a)
)
; a | 0 => a
(rule 3
  (simplify
    (extract_or a (is_zero $true))
  )
  (make_result a)
)
;; a | !b => -1 where a == b
(rule 4
  (simplify
    (extract_or a (value_expr (extract_not (value_with_ty b ty))))
  )
  (if (is_eq a b))
  (make_result (make_all_one ty))
)
; a | (b & _) => a where a == b
(rule 4
  (simplify
    (extract_or a (value_expr (extract_and b _)))
  )
  (if (is_eq a b))
  (make_result a)
)
; a | (_ & b) => a where a == b
(rule 5
  (simplify
    (extract_or a (value_expr (extract_and _ b)))
  )
  (if (is_eq a b))
  (make_result a)
)
; a | !(b & _) => -1 where a == b
(rule 5
  (simplify
    (extract_or a (value_expr (extract_not (value_expr (extract_and (value_with_ty b ty) _)))))
  )
  (if (is_eq a b))
  (make_result (make_all_one ty))
)
; a | !(_ & b) => -1 where a == b
(rule 6
  (simplify
    (extract_or a (value_expr (extract_not (value_expr (extract_and _ (value_with_ty b ty))))))
  )
  (if (is_eq a b))
  (make_result (make_all_one ty))
)
; (a ^ b) | (c & !d) => (a ^ b) where a == c, b == d
(rule 6
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a b))
      (value_expr (extract_and c (value_expr (extract_not d)))
      )
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result arg0)
)
; (a ^ b) | (!c & d) => (a ^ b) where a == d, b == c
(rule 7
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a b))
      (value_expr (extract_and (value_expr (extract_not c)) d)
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result arg0)
)
; (a ^ b) | (!c & d) => (a ^ b) where a == c, b == d
(rule 8
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a b))
      (value_expr (extract_and (value_expr (extract_not c)) d)
      )
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result arg0)
)
; (a ^ b) | (c & !d) => (a ^ b) where a == d, b == c
(rule 9
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a b))
      (value_expr (extract_and c (value_expr (extract_not d)))
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result arg0)
)
; (!a ^ b) | (c & d) => (!a ^ b) where a == c, b == d
(rule 10
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor (value_expr (extract_not a)) b))
      (value_expr (extract_and c d))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result arg0)
)
; (!a ^ b) | (c & d) => (!a ^ b) where a == d, b == c
(rule 11
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor (value_expr (extract_not a)) b))
      (value_expr (extract_and c d)
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result arg0)
)
;; (a ^ !b) | (c & d) => (a ^ !b) where a == c, b == d
(rule 12
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a (value_expr (extract_not b))))
      (value_expr (extract_and c d)
      )
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result arg0)
)
; (a ^ !b) | (c & d) => (a ^ !b) where a == d, b == c
(rule 13
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_xor a (value_expr (extract_not b))))
      (value_expr (extract_and c d)
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result arg0)
)
; (a | b) | (c ^ d) => (a | b) where a == c, b == d
(rule 14
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_or a b))
      (value_expr (extract_xor c d)
      )
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result arg0)
)
; (a | b) | (c ^ d) => (a | b) where a == d, b == c
(rule 15
  (simplify
    (extract_or
      arg0 @ (value_expr (extract_or a b))
      (value_expr (extract_xor c d)
      )
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result arg0)
)
; (!a & b) | !(c | d) => !a where a == c, b == d
(rule 16
  (simplify
    (extract_or
       (value_expr (extract_and neg_a @ (value_expr (extract_not a)) b))
       (value_expr (extract_not (value_expr (extract_or c d))))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result neg_a)
)
; (!a & b) | !(c | d) => !a where a == d, b == c
(rule 17
  (simplify
    (extract_or
       (value_expr (extract_and neg_a @ (value_expr (extract_not a)) b))
       (value_expr (extract_not (value_expr (extract_or c d))))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result neg_a)
)
; (a & !b) | !(a | b) => !b where a == c, b == d
(rule 18
  (simplify
    (extract_or
       (value_expr (extract_and a neg_b @ (value_expr (extract_not b))))
       (value_expr (extract_not (value_expr (extract_or c d))))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result neg_b)
)
; (a & !b) | !(c | d) => !b where a == d, b == c
(rule 19
  (simplify
    (extract_or
       (value_expr (extract_and a neg_b @ (value_expr (extract_not b))))
       (value_expr (extract_not (value_expr (extract_or c d))))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result neg_b)
)

;; Rules for BinaryOp.Xor
; a ^ 0 => a
(rule
  (simplify
    (extract_xor a (is_zero $true))
  )
  (make_result a)
)
; a ^ b => 0 where a == b
(rule 2
  (simplify
    (extract_xor a (value_with_ty b ty))
  )
  (if (is_eq a b))
  (make_result (make_zero ty))
)
; a ^ !b => -1 where a == b
(rule 3
  (simplify
    (extract_xor a (value_expr_with_ty (extract_not b) ty))
  )
  (if (is_eq a b))
  (make_result (make_all_one ty))
)
;; a ^ (c ^ b) => b where  a == c
(rule 4
  (simplify
    (extract_xor a (value_expr (extract_xor c b)))
  )
  (if (is_eq a c))
  (make_result b)
)
; a ^ (b ^ c) => b where a == c
(rule 5
  (simplify
    (extract_xor a (value_expr (extract_xor b c)))
  )
  (if (is_eq a c))
  (make_result b)
)
; (a | b) ^ (!c & d) => a where a == c, b == d
(rule 6
  (simplify
    (extract_xor
      (value_expr (extract_or a b))
      (value_expr (extract_and (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result a)
)
; (a | b) ^ (c & !d) => a where a == d, b == c
(rule 7
  (simplify
    (extract_xor
      (value_expr (extract_or a b))
      (value_expr (extract_and c (value_expr (extract_not d))))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result a)
)
; (a | b) ^ (c & !d) => b where a == c, b == d
(rule 8
  (simplify
    (extract_xor
      (value_expr (extract_or a b))
      (value_expr (extract_and c (value_expr (extract_not d))))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result b)
)
; (a | b) ^ (!b & a) => b where a == d, b == c
(rule 9
  (simplify
    (extract_xor
      (value_expr (extract_or a b))
      (value_expr (extract_and (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result b)
)
; (a & b) ^ (!c | d) => !a where a == c, b == d
(rule 10
  (simplify
    (extract_xor
      (value_expr (extract_and a b))
      (value_expr (extract_or not_a @ (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result not_a)
)
; (a & b) ^ (c | !d) => !a where a == d, b == c
(rule 11
  (simplify
    (extract_xor
      (value_expr (extract_and a b))
      (value_expr (extract_or c not_a @ (value_expr (extract_not d))))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result not_a)
)
; (a & b) ^ (c | !d) => !b where a == c, b == d
(rule 12
  (simplify
    (extract_xor
      (value_expr (extract_and a b))
      (value_expr (extract_or c not_b @ (value_expr (extract_not d))))
    )
  )
  (if (is_eq a c))
  (if (is_eq b d))
  (make_result not_b)
)
; (a & b) ^ (!b | a) => !b where a == d, b == c
(rule 13
  (simplify
    (extract_xor
      (value_expr (extract_and a b))
      (value_expr (extract_or not_b @ (value_expr (extract_not c)) d))
    )
  )
  (if (is_eq a d))
  (if (is_eq b c))
  (make_result not_b)
)

;; Rules for UnaryOp.Not
; !(!a) => a
(rule
  (simplify
    (extract_not (value_expr (extract_not a)))
  )
  (make_result a)
)
; !(-a) => a - 1
(rule
  (simplify
    (extract_not (value_expr (extract_neg (value_with_ty a ty))))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Sub) (arg_array2 a (make_one ty))))
)
; !(a == b) => a != b;
(rule
  (simplify
    (extract_not (value_expr (extract_eq a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Ne) (arg_array2 a b)))
)
; !(a != b) => a == b;
(rule
  (simplify
    (extract_not (value_expr (extract_ne a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Eq) (arg_array2 a b)))
)
; !(a < b) => b <= a;
(rule
  (simplify
    (extract_not (value_expr (extract_lt a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Le) (arg_array2 b a)))
)
; !(a <= b) => b < a;
(rule
  (simplify
    (extract_not (value_expr (extract_le a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Lt) (arg_array2 b a)))
)
; !(a < b) => b <= a; signed.
(rule
  (simplify
    (extract_not (value_expr (extract_slt a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Sle) (arg_array2 b a)))
)
; !(a <= b) => b < a; signed.
(rule
  (simplify
    (extract_not (value_expr (extract_sle a b)))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Slt) (arg_array2 b a)))
)

;; Rules for UnaryOp.Neg
; -(-a) => a
(rule
  (simplify
    (extract_neg (value_expr (extract_neg a)))
  )
  (make_result a)
)
; -(!a) => a + 1
(rule
  (simplify
    (extract_neg (value_expr (extract_not (value_with_ty a ty))))
  )
  (SimplifyRawResult.Expr (ExprData.Binary (BinaryOp.Add) (arg_array2 a (make_one ty))))
)
