(type
  SimplifyResult extern
    (enum
      (Value (val Value))
      (Insn (data InsnData))
    )
)

(extern const $true bool)
(extern const $false bool)

(decl is_zero (bool) Value)
(extern extractor infallible is_zero is_zero)

(decl is_one (bool) Value)
(extern extractor infallible is_one is_one)

(decl is_two (bool) Value)
(extern extractor infallible is_two is_two)

(decl is_all_one (bool) Value)
(extern extractor infallible is_all_one is_all_one)

(decl is_same (bool Value) Value)
(extern extractor infallible is_same is_same (out in))

(decl is_power_of_two (bool) Value)
(extern extractor infallible is_power_of_two is_power_of_two)

(decl make_zero (Type) Value)
(extern constructor make_zero make_zero)

(decl make_one (Type) Value)
(extern constructor make_one make_one)

(decl make_all_one (Type) Value)
(extern constructor make_all_one make_all_one)



;; Insn Simplify rule ;;
(decl simplify (Insn) SimplifyResult)


;;; Rules for Binary insns ;;;

;; Rules for BinaryOp.Add ;;
; a + 0 => a
(rule
  (simplify
    (extract_add a (is_zero $true)))
  (SimplifyResult.Value a)
)
; a + (-a) => 0
(rule
  (simplify
    (extract_add a (value_insn (extract_neg (value_with_ty(is_same $true <a) ty))))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a + (b - a) => b
(rule
  (simplify
    (extract_add a (value_insn (extract_sub b (is_same $true <a))))
  )
  (SimplifyResult.Value b)
)
; (a - b) + b => a
(rule
  (simplify
    (extract_add (value_insn (extract_sub a b)) (is_same $true <b))
  )
  (SimplifyResult.Value a)
)
; a + !a => -1
(rule
  (simplify
    (extract_add a (value_insn (extract_not (value_with_ty (is_same $true <a) ty))))
  )
  (SimplifyResult.Value (make_all_one ty))
)

;; Rules for BinaryOp.Sub ;;
; a - 0 => a
(rule
  (simplify
    (extract_sub a (is_zero $true))
  )
  (SimplifyResult.Value a)
)
; 0 - a => -a
(rule
  (simplify
    (extract_sub (is_zero $true) a)
  )
  (SimplifyResult.Insn (InsnData.Unary (UnaryOp.Neg) (value_array1 a)))
)
; a - a => 0
(rule
  (simplify
    (extract_sub a (value_with_ty (is_same $true <a) ty))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a - (a - b) =>  b
(rule
  (simplify
    (extract_sub a (value_insn (extract_sub (is_same $true <a) b)))
  )
  (SimplifyResult.Value b)
)
; (a - b) - a => -b
(rule
  (simplify
    (extract_sub (value_insn (extract_sub a b)) (is_same $true <a))
  )
  (SimplifyResult.Insn (InsnData.Unary (UnaryOp.Neg) (value_array1 b)))
)
; a - (a + b) => -b
(rule
  (simplify
    (extract_sub a (value_insn (extract_add (is_same $true <a) b)))
  )
  (SimplifyResult.Insn (InsnData.Unary (UnaryOp.Neg) (value_array1 b)))
)
; (a + b) - a =>  b
(rule
  (simplify
    (extract_sub (value_insn (extract_add a b)) (is_same $true <a))
  )
  (SimplifyResult.Value b)
)

;; Rules for BinaryOp.Mul ;;
; _ * 0 => 0
(rule
  (simplify
    (extract_mul _ (value_with_ty (is_zero $true) ty))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a * 1 => a
(rule
  (simplify
    (extract_mul a (is_one $true))
  )
  (SimplifyResult.Value a)
)
; a * 2 => a + a
(rule
  (simplify
    (extract_mul a (is_two $true))
  )
  (SimplifyResult.Insn (InsnData.Binary (BinaryOp.Add) (value_array2 a a)))
)

;; Rules for BinaryOp.Sdiv ;;
;; We don't simplify patterns where a divisor is a value not to change semantics. ;;
; 0 / a => 0
(rule
  (simplify
    (extract_sdiv (value_with_ty (is_zero $true) ty) _)
  )
  (SimplifyResult.Value (make_zero ty))
)

;; Rules for BinaryOp.Udiv ;;
;; We don't simplify patterns where a divisor is a value not to change semantics. ;;
; 0 / a => 0
(rule
  (simplify
    (extract_udiv (value_with_ty (is_zero $true) ty) _)
  )
  (SimplifyResult.Value (make_zero ty))
)

;; Rules for BinaryOp.Lt
; a < a => -1
(rule
  (simplify
    (extract_lt a (value_with_ty (is_same $true <a) ty))
  )
  (SimplifyResult.Value (make_all_one ty))
)

;; Rules for BinaryOp.Gt
; a > b => b < a
(rule
  (simplify
    (extract_gt a b)
  )
  (SimplifyResult.Insn (InsnData.Binary (BinaryOp.Lt) (value_array2 b a)))
)

;; Rules for BinaryOp.Slt
; a < a => -1
(rule
  (simplify
    (extract_slt a (value_with_ty (is_same $true <a) ty))
  )
  (SimplifyResult.Value (make_all_one ty))
)

;; Rules for BinaryOp.Sgt
; a > b => b < a
(rule
  (simplify
    (extract_sgt a b)
  )
  (SimplifyResult.Insn (InsnData.Binary (BinaryOp.Slt) (value_array2 b a)))
)

;; Rules for BinaryOp.Eq
; a == a => 1
(rule
  (simplify
    (extract_eq a (value_with_ty (is_same $true <a) ty))
  )
  (SimplifyResult.Value (make_all_one ty))
)

;; Rules for BinaryOp.And
; a & a => a
(rule
  (simplify
    (extract_and a (is_same $true <a))
  )
  (SimplifyResult.Value a)
)
; _ & 0 => 0
(rule
  (simplify
    (extract_and _ (value_with_ty (is_zero $true) ty))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a & -1 => a
(rule
  (simplify
    (extract_and a (is_all_one $true))
  )
  (SimplifyResult.Value a)
)
; a & !a => 0
(rule
  (simplify
    (extract_and a (value_insn (extract_not (value_with_ty (is_same $true <a) ty))))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a & (a | _) => a
(rule
  (simplify
    (extract_and a (value_insn (extract_or (is_same $true <a) _)))
  )
  (SimplifyResult.Value a)
)
; a & (_ | a) => a
(rule
  (simplify
    (extract_and a (value_insn (extract_or _ (is_same $true <a))))
  )
  (SimplifyResult.Value a)
)
; (a | b) & (a | !b) => a
(rule
  (simplify
    (extract_and
      (value_insn (extract_or a b))
      (value_insn
        (extract_or (is_same $true <a) (value_insn (extract_not (is_same $true <b))))
      )
    )
  )
  (SimplifyResult.Value a)
)
; (a | b) & (!b | a) => a
(rule
  (simplify
    (extract_and
      (value_insn (extract_or a b))
      (value_insn
        (extract_or (value_insn (extract_not (is_same $true <b))) (is_same $true <a))
      )
    )
  )
  (SimplifyResult.Value a)
)
; (a | b) & (!a | b) => b
(rule
  (simplify
    (extract_and
      (value_insn (extract_or a b))
      (value_insn
        (extract_or (value_insn (extract_not (is_same $true <a))) (is_same $true <b))
      )
    )
  )
  (SimplifyResult.Value b)
)
; (a | b) & (b | !a) => b
(rule
  (simplify
    (extract_and
      (value_insn (extract_or a b))
      (value_insn
        (extract_or (is_same $true <b) (value_insn (extract_not (is_same $true <a))))
      )
    )
  )
  (SimplifyResult.Value b)
)
; a & (-a) => a where a: is_power_of_two.
(rule
  (simplify
    (extract_and a (value_insn (extract_neg (and (is_same $true <a) (is_power_of_two $true)))))
  )
  (SimplifyResult.Value a)
)
; a & (a - 1) => 0 where a: is_power_of_two.
(rule
  (simplify
    (extract_and a (value_insn (extract_sub (and (is_same $true <a) (is_power_of_two $true) (value_ty ty)) (is_one $true))))
  )
  (SimplifyResult.Value (make_zero ty))
)

;; Rules for BinaryOp.Or
; a | -1 => -1
(rule
  (simplify
    (extract_or a (value_with_ty (is_all_one $true) ty))
  )
  (SimplifyResult.Value (make_all_one ty))
)
; a | a => a
(rule
  (simplify
    (extract_or a (is_same $true <a))
  )
  (SimplifyResult.Value a)
)
; a | 0 => a
(rule
  (simplify
    (extract_or a (is_zero $true))
  )
  (SimplifyResult.Value a)
)
; a | !a => -1
(rule
  (simplify
    (extract_or a (value_insn (extract_not (value_with_ty (is_same $true <a) ty))))
  )
  (SimplifyResult.Value (make_all_one ty))
)
; a | (a & _) => a
(rule
  (simplify
    (extract_or a (value_insn (extract_and (is_same $true <a) _)))
  )
  (SimplifyResult.Value a)
)
; a | (_ & a) => a
(rule
  (simplify
    (extract_or a (value_insn (extract_and _ (is_same $true <a))))
  )
  (SimplifyResult.Value a)
)
; a | !(a & _) => -1
(rule
  (simplify
    (extract_or a (value_insn (extract_not (value_insn (extract_and (value_with_ty (is_same $true <a) ty) _)))))
  )
  (SimplifyResult.Value (make_all_one ty))
)
; a | !(_ & a) => -1
(rule
  (simplify
    (extract_or a (value_insn (extract_not (value_insn (extract_and _ (value_with_ty (is_same $true <a) ty))))))
  )
  (SimplifyResult.Value (make_all_one ty))
)
; (a ^ b) | (a & !b) => (a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a b))
      (value_insn
        (extract_and (is_same $true <a) (value_insn (extract_not (is_same $true <b))))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a ^ b) | (!b & a) => (a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a b))
      (value_insn
        (extract_and (value_insn (extract_not (is_same $true <b))) (is_same $true <a))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a ^ b) | (!a & b) => (a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a b))
      (value_insn
        (extract_and (value_insn (extract_not (is_same $true <a))) (is_same $true <b))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a ^ b) | (b & !a) => (a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a b))
      (value_insn
        (extract_and (is_same $true <b) (value_insn (extract_not (is_same $true <a))))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (!a ^ b) | (a & b) => (!a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor (value_insn (extract_not a)) b))
      (value_insn
        (extract_and (is_same $true <a) (is_same $true <b))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (!a ^ b) | (b & a) => (!a ^ b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor (value_insn (extract_not a)) b))
      (value_insn
        (extract_and (is_same $true <b) (is_same $true <a))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a ^ !b) | (a & b) => (a ^ !b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a (value_insn (extract_not b))))
      (value_insn
        (extract_and (is_same $true <a) (is_same $true <b))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a ^ !b) | (b & a) => (a ^ !b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_xor a (value_insn (extract_not b))))
      (value_insn
        (extract_and (is_same $true <b) (is_same $true <a))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a | b) | (a ^ b) => (a | b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_or a b))
      (value_insn
        (extract_xor (is_same $true <a) (is_same $true <b))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (a | b) | (b ^ a) => (a | b)
(rule
  (simplify
    (extract_or
      arg0 @ (value_insn (extract_or a b))
      (value_insn
        (extract_xor (is_same $true <b) (is_same $true <a))
      )
    )
  )
  (SimplifyResult.Value arg0)
)
; (!a & b) | !(a | b) => !a
(rule
  (simplify
    (extract_or
       (value_insn (extract_and neg_a @ (value_insn (extract_not a)) b))
       (value_insn (extract_not (value_insn (extract_or (is_same $true <a) (is_same $true <b)))))
    )
  )
  (SimplifyResult.Value neg_a)
)
; (!a & b) | !(b | a) => !a
(rule
  (simplify
    (extract_or
       (value_insn (extract_and neg_a @ (value_insn (extract_not a)) b))
       (value_insn (extract_not (value_insn (extract_or (is_same $true <b) (is_same $true <a)))))
    )
  )
  (SimplifyResult.Value neg_a)
)
; (a & !b) | !(a | b) => !b
(rule
  (simplify
    (extract_or
       (value_insn (extract_and a neg_b @ (value_insn (extract_not b))))
       (value_insn (extract_not (value_insn (extract_or (is_same $true <a) (is_same $true <b)))))
    )
  )
  (SimplifyResult.Value neg_b)
)
; (a & !b) | !(b | a) => !b
(rule
  (simplify
    (extract_or
       (value_insn (extract_and a neg_b @ (value_insn (extract_not b))))
       (value_insn (extract_not (value_insn (extract_or (is_same $true <b) (is_same $true <a)))))
    )
  )
  (SimplifyResult.Value neg_b)
)

;; Rules for BinaryOp.Xor
; a ^ 0 => a
(rule
  (simplify
    (extract_xor a (is_zero $true))
  )
  (SimplifyResult.Value a)
)
; a ^ a => 0
(rule
  (simplify
    (extract_xor a (value_with_ty (is_same $true <a) ty))
  )
  (SimplifyResult.Value (make_zero ty))
)
; a ^ !a => -1
(rule
  (simplify
    (extract_xor a (value_insn_with_ty (extract_not (is_same $true <a)) ty))
  )
  (SimplifyResult.Value (make_all_one ty))
)
; a ^ (a ^ b) => b
(rule
  (simplify
    (extract_xor a (value_insn (extract_xor (is_same $true <a) b)))
  )
  (SimplifyResult.Value b)
)
; a ^ (b ^ a) => b
(rule
  (simplify
    (extract_xor a (value_insn (extract_xor b (is_same $true <a))))
  )
  (SimplifyResult.Value b)
)
; (a | b) ^ (!a & b) => a
(rule
  (simplify
    (extract_xor
      (value_insn (extract_or a b))
      (value_insn (extract_and (value_insn (extract_not (is_same $true <a))) (is_same $true <b)))
    )
  )
  (SimplifyResult.Value a)
)
; (a | b) ^ (b & !a) => a
(rule
  (simplify
    (extract_xor
      (value_insn (extract_or a b))
      (value_insn (extract_and (is_same $true <b) (value_insn (extract_not (is_same $true <a)))))
    )
  )
  (SimplifyResult.Value a)
)
; (a | b) ^ (a & !b) => b
(rule
  (simplify
    (extract_xor
      (value_insn (extract_or a b))
      (value_insn (extract_and (is_same $true <a) (value_insn (extract_not (is_same $true <b)))))
    )
  )
  (SimplifyResult.Value b)
)
; (a | b) ^ (!b & a) => b
(rule
  (simplify
    (extract_xor
      (value_insn (extract_or a b))
      (value_insn (extract_and (value_insn (extract_not (is_same $true <b))) (is_same $true <a)))
    )
  )
  (SimplifyResult.Value b)
)

; (a & b) ^ (!a | b) => !a
(rule
  (simplify
    (extract_xor
      (value_insn (extract_and a b))
      (value_insn (extract_or not_a @ (value_insn (extract_not (is_same $true <a))) (is_same $true <b)))
    )
  )
  (SimplifyResult.Value not_a)
)
; (a & b) ^ (b | !a) => !a
(rule
  (simplify
    (extract_xor
      (value_insn (extract_and a b))
      (value_insn (extract_or (is_same $true <b) not_a @ (value_insn (extract_not (is_same $true <a)))))
    )
  )
  (SimplifyResult.Value not_a)
)
; (a & b) ^ (a | !b) => !b
(rule
  (simplify
    (extract_xor
      (value_insn (extract_and a b))
      (value_insn (extract_or (is_same $true <a) not_b @ (value_insn (extract_not (is_same $true <b)))))
    )
  )
  (SimplifyResult.Value not_b)
)
; (a & b) ^ (!b | a) => !b
(rule
  (simplify
    (extract_xor
      (value_insn (extract_and a b))
      (value_insn (extract_or not_b @ (value_insn (extract_not (is_same $true <b))) (is_same $true <a)))
    )
  )
  (SimplifyResult.Value not_b)
)
