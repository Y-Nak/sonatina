---
source: crates/parser2/tests/syntax.rs
expression: s
input_file: crates/parser2/test_files/syntax/stmts/stmts.sntn
---
stmt "store @memory v1 v2;"
  store_stmt "store @memory v1 v2"
    location "@memory"
    value "v1"
      value_name "v1"
    value "v2"
      value_name "v2"
stmt "store @storage 0.i32 1000.i64;"
  store_stmt "store @storage 0.i32 1000.i64"
    location "@storage"
    value "0.i32"
      imm_number "0.i32"
        decimal "0"
        primitive_type "i32"
    value "1000.i64"
      imm_number "1000.i64"
        decimal "1000"
        primitive_type "i64"
stmt "v1.i64 = load @storage v0;"
  define_stmt "v1.i64 = load @storage v0"
    value_declaration "v1.i64"
      value_name "v1"
      type_name "i64"
        primitive_type "i64"
    expr "load @storage v0"
      load_expr "load @storage v0"
        location "@storage"
        value "v0"
          value_name "v0"
stmt "v1.i64 = load @memory 0.i32;"
  define_stmt "v1.i64 = load @memory 0.i32"
    value_declaration "v1.i64"
      value_name "v1"
      type_name "i64"
        primitive_type "i64"
    expr "load @memory 0.i32"
      load_expr "load @memory 0.i32"
        location "@memory"
        value "0.i32"
          imm_number "0.i32"
            decimal "0"
            primitive_type "i32"
stmt "v4.i64 = call %foo v0 0.i8 v1 v2 v3;"
  define_stmt "v4.i64 = call %foo v0 0.i8 v1 v2 v3"
    value_declaration "v4.i64"
      value_name "v4"
      type_name "i64"
        primitive_type "i64"
    expr "call %foo v0 0.i8 v1 v2 v3"
      call_expr "call %foo v0 0.i8 v1 v2 v3"
        function_identifier "%foo"
          function_name "foo"
        value "v0"
          value_name "v0"
        value "0.i8"
          imm_number "0.i8"
            decimal "0"
            primitive_type "i8"
        value "v1"
          value_name "v1"
        value "v2"
          value_name "v2"
        value "v3"
          value_name "v3"
stmt "v4.*i64 = alloca i64;"
  define_stmt "v4.*i64 = alloca i64"
    value_declaration "v4.*i64"
      value_name "v4"
      type_name "*i64"
        ptr_type "*i64"
          type_name "i64"
            primitive_type "i64"
    expr "alloca i64"
      alloca_expr "alloca i64"
        type_name "i64"
          primitive_type "i64"
stmt "v0.i64 = gep v0 0.i8 1.i8 1.i8;"
  define_stmt "v0.i64 = gep v0 0.i8 1.i8 1.i8"
    value_declaration "v0.i64"
      value_name "v0"
      type_name "i64"
        primitive_type "i64"
    expr "gep v0 0.i8 1.i8 1.i8"
      gep_expr "gep v0 0.i8 1.i8 1.i8"
        value "v0"
          value_name "v0"
        value "0.i8"
          imm_number "0.i8"
            decimal "0"
            primitive_type "i8"
        value "1.i8"
          imm_number "1.i8"
            decimal "1"
            primitive_type "i8"
        value "1.i8"
          imm_number "1.i8"
            decimal "1"
            primitive_type "i8"
