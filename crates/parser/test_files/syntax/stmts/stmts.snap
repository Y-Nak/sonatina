---
source: crates/parser/tests/syntax.rs
expression: s
input_file: crates/parser/test_files/syntax/stmts/stmts.sntn
---
stmt "store @memory v1 v2;"
  inst_stmt "store @memory v1 v2"
    inst "store @memory v1 v2"
      inst_name "store"
        inst_identifier "store"
      inst_arg "@memory"
        type_name "@memory"
          struct_identifier "@memory"
            struct_name "memory"
      inst_arg "v1"
        value "v1"
          value_name "v1"
      inst_arg "v2"
        value "v2"
          value_name "v2"
stmt "store @storage 0.i32 1000.i64;"
  inst_stmt "store @storage 0.i32 1000.i64"
    inst "store @storage 0.i32 1000.i64"
      inst_name "store"
        inst_identifier "store"
      inst_arg "@storage"
        type_name "@storage"
          struct_identifier "@storage"
            struct_name "storage"
      inst_arg "0.i32"
        value "0.i32"
          imm_number "0.i32"
            decimal "0"
            primitive_type "i32"
      inst_arg "1000.i64"
        value "1000.i64"
          imm_number "1000.i64"
            decimal "1000"
            primitive_type "i64"
stmt "v1.i64 = load @storage v0;"
  assign_stmt "v1.i64 = load @storage v0"
    value_declaration "v1.i64"
      value_name "v1"
      type_name "i64"
        primitive_type "i64"
    inst "load @storage v0"
      inst_name "load"
        inst_identifier "load"
      inst_arg "@storage"
        type_name "@storage"
          struct_identifier "@storage"
            struct_name "storage"
      inst_arg "v0"
        value "v0"
          value_name "v0"
stmt "v1.i64 = load @memory 0.i32;"
  assign_stmt "v1.i64 = load @memory 0.i32"
    value_declaration "v1.i64"
      value_name "v1"
      type_name "i64"
        primitive_type "i64"
    inst "load @memory 0.i32"
      inst_name "load"
        inst_identifier "load"
      inst_arg "@memory"
        type_name "@memory"
          struct_identifier "@memory"
            struct_name "memory"
      inst_arg "0.i32"
        value "0.i32"
          imm_number "0.i32"
            decimal "0"
            primitive_type "i32"
stmt "v4.i64 = call %foo v0 0.i8 v1 v2 v3;"
  assign_stmt "v4.i64 = call %foo v0 0.i8 v1 v2 v3"
    value_declaration "v4.i64"
      value_name "v4"
      type_name "i64"
        primitive_type "i64"
    inst "call %foo v0 0.i8 v1 v2 v3"
      inst_name "call"
        inst_identifier "call"
      inst_arg "%foo"
        function_identifier "%foo"
          function_name "foo"
      inst_arg "v0"
        value "v0"
          value_name "v0"
      inst_arg "0.i8"
        value "0.i8"
          imm_number "0.i8"
            decimal "0"
            primitive_type "i8"
      inst_arg "v1"
        value "v1"
          value_name "v1"
      inst_arg "v2"
        value "v2"
          value_name "v2"
      inst_arg "v3"
        value "v3"
          value_name "v3"
stmt "v0.i64 = gep v0 0.i8 1.i8 1.i8;"
  assign_stmt "v0.i64 = gep v0 0.i8 1.i8 1.i8"
    value_declaration "v0.i64"
      value_name "v0"
      type_name "i64"
        primitive_type "i64"
    inst "gep v0 0.i8 1.i8 1.i8"
      inst_name "gep"
        inst_identifier "gep"
      inst_arg "v0"
        value "v0"
          value_name "v0"
      inst_arg "0.i8"
        value "0.i8"
          imm_number "0.i8"
            decimal "0"
            primitive_type "i8"
      inst_arg "1.i8"
        value "1.i8"
          imm_number "1.i8"
            decimal "1"
            primitive_type "i8"
      inst_arg "1.i8"
        value "1.i8"
          imm_number "1.i8"
            decimal "1"
            primitive_type "i8"
stmt "v1.i8 = phi v0 (0.i8 block1) (1.i8 block2) (v5 block3) (v32 block4);"
  assign_stmt "v1.i8 = phi v0 (0.i8 block1) (1.i8 block2) (v5 block3) (v32 block4)"
    value_declaration "v1.i8"
      value_name "v1"
      type_name "i8"
        primitive_type "i8"
    inst "phi v0 (0.i8 block1) (1.i8 block2) (v5 block3) (v32 block4)"
      inst_name "phi"
        inst_identifier "phi"
      inst_arg "v0"
        value "v0"
          value_name "v0"
      inst_arg "(0.i8 block1) (1.i8 block2) (v5 block3) (v32 block4)"
        value_block_map "(0.i8 block1) (1.i8 block2) (v5 block3) (v32 block4)"
          value "0.i8"
            imm_number "0.i8"
              decimal "0"
              primitive_type "i8"
          block_ident "block1"
            block_number "1"
          value "1.i8"
            imm_number "1.i8"
              decimal "1"
              primitive_type "i8"
          block_ident "block2"
            block_number "2"
          value "v5"
            value_name "v5"
          block_ident "block3"
            block_number "3"
          value "v32"
            value_name "v32"
          block_ident "block4"
            block_number "4"
