---
source: crates/parser/tests/syntax.rs
expression: "module \"target = \"evm-ethereum-london\"\n\n#! this is a module\n#! with two functions\n\ndeclare external %add_i8(i8, i8) -> i8;\n\ntype @foo = { i8, i16, *i64 };\ntype @bar = <{ i8, [i8; 31] }>;\n\nfunc public %main() {\n    block0:\n        v0.i8 = call %foo 100.i8;\n        return;\n}\n\n# multiplies arg by 2\nfunc private %foo(v0.i8) -> i8 {\nblock0:\nv1.i8 = mul v0 2.i8;\nv2.i8 = call %add_i8 v0 v1;\nreturn v2;\n}\n\nfunc private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) {\n    block0:\n        return;\n}\n\nfunc private %table(v0.i8) {\n    block0:\n        br_table v0 block0 (1.i8 block1) (2.i8 block2);\n    block1:\n        return 1.i8;\n    block2:\n        return 2.i8;\n}\n\nfunc private %flow(v0.i64) -> i64 {\n    block0:\n        jump block1;\n    block1:\n        v1.i64 = phi (v0 block0) (100.i64 block2);\n        v2.i1 = gt v1 10.i64;\n        br v2 block2 block3;\n    block2:\n        jump block1;\n    block3:\n        return v1;\n}\n\"\n  target_triple \"evm-ethereum-london\"\n  COMMENT \"#! this is a module\"\n  COMMENT \"#! with two functions\"\n  function_declaration \"declare external %add_i8(i8, i8) -> i8;\"\n    linkage \"external\"\n    function_identifier \"%add_i8\"\n      function_name \"add_i8\"\n    function_param_type_list \"(i8, i8)\"\n      type_name \"i8\"\n        primitive_type \"i8\"\n      type_name \"i8\"\n        primitive_type \"i8\"\n    function_ret_type \"-> i8\"\n      type_name \"i8\"\n        primitive_type \"i8\"\n  struct_declaration \"type @foo = { i8, i16, *i64 };\"\n    struct_identifier \"@foo\"\n      struct_name \"foo\"\n    normal_field_list \"{ i8, i16, *i64 }\"\n      type_name \"i8\"\n        primitive_type \"i8\"\n      type_name \"i16\"\n        primitive_type \"i16\"\n      type_name \"*i64\"\n        ptr_type \"*i64\"\n          type_name \"i64\"\n            primitive_type \"i64\"\n  struct_declaration \"type @bar = <{ i8, [i8; 31] }>;\"\n    struct_identifier \"@bar\"\n      struct_name \"bar\"\n    packed_field_list \"<{ i8, [i8; 31] }>\"\n      type_name \"i8\"\n        primitive_type \"i8\"\n      type_name \"[i8; 31]\"\n        array_type \"[i8; 31]\"\n          type_name \"i8\"\n            primitive_type \"i8\"\n          array_size \"31\"\n  function \"func public %main() {\n      block0:\n          v0.i8 = call %foo 100.i8;\n          return;\n  }\"\n    function_signature \"func public %main() \"\n      linkage \"public\"\n      function_identifier \"%main\"\n        function_name \"main\"\n      function_params \"()\"\n    block \"block0:\n            v0.i8 = call %foo 100.i8;\n            return;\"\n      block_ident \"block0\"\n        block_number \"0\"\n      stmt \"v0.i8 = call %foo 100.i8;\"\n        assign_stmt \"v0.i8 = call %foo 100.i8\"\n          value_declaration \"v0.i8\"\n            value_name \"v0\"\n            type_name \"i8\"\n              primitive_type \"i8\"\n          inst \"call %foo 100.i8\"\n            inst_name \"call\"\n              inst_identifier \"call\"\n            inst_arg \"%foo\"\n              function_identifier \"%foo\"\n                function_name \"foo\"\n            inst_arg \"100.i8\"\n              value \"100.i8\"\n                imm_number \"100.i8\"\n                  decimal \"100\"\n                  primitive_type \"i8\"\n      stmt \"return;\"\n        inst_stmt \"return\"\n          inst \"return\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n  COMMENT \"# multiplies arg by 2\"\n  function \"func private %foo(v0.i8) -> i8 {\n  block0:\n  v1.i8 = mul v0 2.i8;\n  v2.i8 = call %add_i8 v0 v1;\n  return v2;\n  }\"\n    function_signature \"func private %foo(v0.i8) -> i8\"\n      linkage \"private\"\n      function_identifier \"%foo\"\n        function_name \"foo\"\n      function_params \"(v0.i8)\"\n        value_declaration \"v0.i8\"\n          value_name \"v0\"\n          type_name \"i8\"\n            primitive_type \"i8\"\n      function_ret_type \"-> i8\"\n        type_name \"i8\"\n          primitive_type \"i8\"\n    block \"block0:\n    v1.i8 = mul v0 2.i8;\n    v2.i8 = call %add_i8 v0 v1;\n    return v2;\"\n      block_ident \"block0\"\n        block_number \"0\"\n      stmt \"v1.i8 = mul v0 2.i8;\"\n        assign_stmt \"v1.i8 = mul v0 2.i8\"\n          value_declaration \"v1.i8\"\n            value_name \"v1\"\n            type_name \"i8\"\n              primitive_type \"i8\"\n          inst \"mul v0 2.i8\"\n            inst_name \"mul\"\n              inst_identifier \"mul\"\n            inst_arg \"v0\"\n              value \"v0\"\n                value_name \"v0\"\n            inst_arg \"2.i8\"\n              value \"2.i8\"\n                imm_number \"2.i8\"\n                  decimal \"2\"\n                  primitive_type \"i8\"\n      stmt \"v2.i8 = call %add_i8 v0 v1;\"\n        assign_stmt \"v2.i8 = call %add_i8 v0 v1\"\n          value_declaration \"v2.i8\"\n            value_name \"v2\"\n            type_name \"i8\"\n              primitive_type \"i8\"\n          inst \"call %add_i8 v0 v1\"\n            inst_name \"call\"\n              inst_identifier \"call\"\n            inst_arg \"%add_i8\"\n              function_identifier \"%add_i8\"\n                function_name \"add_i8\"\n            inst_arg \"v0\"\n              value \"v0\"\n                value_name \"v0\"\n            inst_arg \"v1\"\n              value \"v1\"\n                value_name \"v1\"\n      stmt \"return v2;\"\n        inst_stmt \"return v2\"\n          inst \"return v2\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n            inst_arg \"v2\"\n              value \"v2\"\n                value_name \"v2\"\n  function \"func private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) {\n      block0:\n          return;\n  }\"\n    function_signature \"func private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) \"\n      linkage \"private\"\n      function_identifier \"%types\"\n        function_name \"types\"\n      function_params \"(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo)\"\n        value_declaration \"v0.*i8\"\n          value_name \"v0\"\n          type_name \"*i8\"\n            ptr_type \"*i8\"\n              type_name \"i8\"\n                primitive_type \"i8\"\n        value_declaration \"v1.[i8; 2]\"\n          value_name \"v1\"\n          type_name \"[i8; 2]\"\n            array_type \"[i8; 2]\"\n              type_name \"i8\"\n                primitive_type \"i8\"\n              array_size \"2\"\n        value_declaration \"v2.[*i8; 2]\"\n          value_name \"v2\"\n          type_name \"[*i8; 2]\"\n            array_type \"[*i8; 2]\"\n              type_name \"*i8\"\n                ptr_type \"*i8\"\n                  type_name \"i8\"\n                    primitive_type \"i8\"\n              array_size \"2\"\n        value_declaration \"v3.[[i8; 2]; 2]\"\n          value_name \"v3\"\n          type_name \"[[i8; 2]; 2]\"\n            array_type \"[[i8; 2]; 2]\"\n              type_name \"[i8; 2]\"\n                array_type \"[i8; 2]\"\n                  type_name \"i8\"\n                    primitive_type \"i8\"\n                  array_size \"2\"\n              array_size \"2\"\n        value_declaration \"v4.@foo\"\n          value_name \"v4\"\n          type_name \"@foo\"\n            struct_identifier \"@foo\"\n              struct_name \"foo\"\n        value_declaration \"v5.*@foo\"\n          value_name \"v5\"\n          type_name \"*@foo\"\n            ptr_type \"*@foo\"\n              type_name \"@foo\"\n                struct_identifier \"@foo\"\n                  struct_name \"foo\"\n    block \"block0:\n            return;\"\n      block_ident \"block0\"\n        block_number \"0\"\n      stmt \"return;\"\n        inst_stmt \"return\"\n          inst \"return\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n  function \"func private %table(v0.i8) {\n      block0:\n          br_table v0 block0 (1.i8 block1) (2.i8 block2);\n      block1:\n          return 1.i8;\n      block2:\n          return 2.i8;\n  }\"\n    function_signature \"func private %table(v0.i8) \"\n      linkage \"private\"\n      function_identifier \"%table\"\n        function_name \"table\"\n      function_params \"(v0.i8)\"\n        value_declaration \"v0.i8\"\n          value_name \"v0\"\n          type_name \"i8\"\n            primitive_type \"i8\"\n    block \"block0:\n            br_table v0 block0 (1.i8 block1) (2.i8 block2);\"\n      block_ident \"block0\"\n        block_number \"0\"\n      stmt \"br_table v0 block0 (1.i8 block1) (2.i8 block2);\"\n        inst_stmt \"br_table v0 block0 (1.i8 block1) (2.i8 block2)\"\n          inst \"br_table v0 block0 (1.i8 block1) (2.i8 block2)\"\n            inst_name \"br_table\"\n              inst_identifier \"br_table\"\n            inst_arg \"v0\"\n              value \"v0\"\n                value_name \"v0\"\n            inst_arg \"block0\"\n              block_ident \"block0\"\n                block_number \"0\"\n            inst_arg \"(1.i8 block1)\"\n              value_block_map \"(1.i8 block1)\"\n                value \"1.i8\"\n                  imm_number \"1.i8\"\n                    decimal \"1\"\n                    primitive_type \"i8\"\n                block_ident \"block1\"\n                  block_number \"1\"\n            inst_arg \"(2.i8 block2)\"\n              value_block_map \"(2.i8 block2)\"\n                value \"2.i8\"\n                  imm_number \"2.i8\"\n                    decimal \"2\"\n                    primitive_type \"i8\"\n                block_ident \"block2\"\n                  block_number \"2\"\n    block \"block1:\n            return 1.i8;\"\n      block_ident \"block1\"\n        block_number \"1\"\n      stmt \"return 1.i8;\"\n        inst_stmt \"return 1.i8\"\n          inst \"return 1.i8\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n            inst_arg \"1.i8\"\n              value \"1.i8\"\n                imm_number \"1.i8\"\n                  decimal \"1\"\n                  primitive_type \"i8\"\n    block \"block2:\n            return 2.i8;\"\n      block_ident \"block2\"\n        block_number \"2\"\n      stmt \"return 2.i8;\"\n        inst_stmt \"return 2.i8\"\n          inst \"return 2.i8\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n            inst_arg \"2.i8\"\n              value \"2.i8\"\n                imm_number \"2.i8\"\n                  decimal \"2\"\n                  primitive_type \"i8\"\n  function \"func private %flow(v0.i64) -> i64 {\n      block0:\n          jump block1;\n      block1:\n          v1.i64 = phi (v0 block0) (100.i64 block2);\n          v2.i1 = gt v1 10.i64;\n          br v2 block2 block3;\n      block2:\n          jump block1;\n      block3:\n          return v1;\n  }\"\n    function_signature \"func private %flow(v0.i64) -> i64\"\n      linkage \"private\"\n      function_identifier \"%flow\"\n        function_name \"flow\"\n      function_params \"(v0.i64)\"\n        value_declaration \"v0.i64\"\n          value_name \"v0\"\n          type_name \"i64\"\n            primitive_type \"i64\"\n      function_ret_type \"-> i64\"\n        type_name \"i64\"\n          primitive_type \"i64\"\n    block \"block0:\n            jump block1;\"\n      block_ident \"block0\"\n        block_number \"0\"\n      stmt \"jump block1;\"\n        inst_stmt \"jump block1\"\n          inst \"jump block1\"\n            inst_name \"jump\"\n              inst_identifier \"jump\"\n            inst_arg \"block1\"\n              block_ident \"block1\"\n                block_number \"1\"\n    block \"block1:\n            v1.i64 = phi (v0 block0) (100.i64 block2);\n            v2.i1 = gt v1 10.i64;\n            br v2 block2 block3;\"\n      block_ident \"block1\"\n        block_number \"1\"\n      stmt \"v1.i64 = phi (v0 block0) (100.i64 block2);\"\n        assign_stmt \"v1.i64 = phi (v0 block0) (100.i64 block2)\"\n          value_declaration \"v1.i64\"\n            value_name \"v1\"\n            type_name \"i64\"\n              primitive_type \"i64\"\n          inst \"phi (v0 block0) (100.i64 block2)\"\n            inst_name \"phi\"\n              inst_identifier \"phi\"\n            inst_arg \"(v0 block0)\"\n              value_block_map \"(v0 block0)\"\n                value \"v0\"\n                  value_name \"v0\"\n                block_ident \"block0\"\n                  block_number \"0\"\n            inst_arg \"(100.i64 block2)\"\n              value_block_map \"(100.i64 block2)\"\n                value \"100.i64\"\n                  imm_number \"100.i64\"\n                    decimal \"100\"\n                    primitive_type \"i64\"\n                block_ident \"block2\"\n                  block_number \"2\"\n      stmt \"v2.i1 = gt v1 10.i64;\"\n        assign_stmt \"v2.i1 = gt v1 10.i64\"\n          value_declaration \"v2.i1\"\n            value_name \"v2\"\n            type_name \"i1\"\n              primitive_type \"i1\"\n          inst \"gt v1 10.i64\"\n            inst_name \"gt\"\n              inst_identifier \"gt\"\n            inst_arg \"v1\"\n              value \"v1\"\n                value_name \"v1\"\n            inst_arg \"10.i64\"\n              value \"10.i64\"\n                imm_number \"10.i64\"\n                  decimal \"10\"\n                  primitive_type \"i64\"\n      stmt \"br v2 block2 block3;\"\n        inst_stmt \"br v2 block2 block3\"\n          inst \"br v2 block2 block3\"\n            inst_name \"br\"\n              inst_identifier \"br\"\n            inst_arg \"v2\"\n              value \"v2\"\n                value_name \"v2\"\n            inst_arg \"block2\"\n              block_ident \"block2\"\n                block_number \"2\"\n            inst_arg \"block3\"\n              block_ident \"block3\"\n                block_number \"3\"\n    block \"block2:\n            jump block1;\"\n      block_ident \"block2\"\n        block_number \"2\"\n      stmt \"jump block1;\"\n        inst_stmt \"jump block1\"\n          inst \"jump block1\"\n            inst_name \"jump\"\n              inst_identifier \"jump\"\n            inst_arg \"block1\"\n              block_ident \"block1\"\n                block_number \"1\"\n    block \"block3:\n            return v1;\"\n      block_ident \"block3\"\n        block_number \"3\"\n      stmt \"return v1;\"\n        inst_stmt \"return v1\"\n          inst \"return v1\"\n            inst_name \"return\"\n              inst_identifier \"return\"\n            inst_arg \"v1\"\n              value \"v1\"\n                value_name \"v1\"\n  EOI \"\"\n"
input_file: test_files/syntax/module/simple.sntn
---
module "target = "evm-ethereum-london"

#! this is a module
#! with two functions

declare external %add_i8(i8, i8) -> i8;

type @foo = { i8, i16, *i64 };
type @bar = <{ i8, [i8; 31] }>;

func public %main() {
    block0:
        v0.i8 = call %foo 100.i8;
        return;
}

# multiplies arg by 2
func private %foo(v0.i8) -> i8 {
block0:
v1.i8 = mul v0 2.i8;
v2.i8 = call %add_i8 v0 v1;
return v2;
}

func private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) {
    block0:
        return;
}

func private %table(v0.i8) {
    block0:
        br_table v0 block0 (1.i8 block1) (2.i8 block2);
    block1:
        return 1.i8;
    block2:
        return 2.i8;
}

func private %flow(v0.i64) -> i64 {
    block0:
        jump block1;
    block1:
        v1.i64 = phi (v0 block0) (100.i64 block2);
        v2.i1 = gt v1 10.i64;
        br v2 block2 block3;
    block2:
        jump block1;
    block3:
        return v1;
}
"
  target_triple "evm-ethereum-london"
  COMMENT "#! this is a module"
  COMMENT "#! with two functions"
  function_declaration "declare external %add_i8(i8, i8) -> i8;"
    linkage "external"
    function_identifier "%add_i8"
      function_name "add_i8"
    function_param_type_list "(i8, i8)"
      type_name "i8"
        primitive_type "i8"
      type_name "i8"
        primitive_type "i8"
    function_ret_type "-> i8"
      type_name "i8"
        primitive_type "i8"
  struct_declaration "type @foo = { i8, i16, *i64 };"
    struct_identifier "@foo"
      struct_name "foo"
    normal_field_list "{ i8, i16, *i64 }"
      type_name "i8"
        primitive_type "i8"
      type_name "i16"
        primitive_type "i16"
      type_name "*i64"
        ptr_type "*i64"
          type_name "i64"
            primitive_type "i64"
  struct_declaration "type @bar = <{ i8, [i8; 31] }>;"
    struct_identifier "@bar"
      struct_name "bar"
    packed_field_list "<{ i8, [i8; 31] }>"
      type_name "i8"
        primitive_type "i8"
      type_name "[i8; 31]"
        array_type "[i8; 31]"
          type_name "i8"
            primitive_type "i8"
          array_size "31"
  function "func public %main() {
      block0:
          v0.i8 = call %foo 100.i8;
          return;
  }"
    function_signature "func public %main() "
      linkage "public"
      function_identifier "%main"
        function_name "main"
      function_params "()"
    block "block0:
            v0.i8 = call %foo 100.i8;
            return;"
      block_ident "block0"
        block_number "0"
      stmt "v0.i8 = call %foo 100.i8;"
        assign_stmt "v0.i8 = call %foo 100.i8"
          value_declaration "v0.i8"
            value_name "v0"
            type_name "i8"
              primitive_type "i8"
          inst "call %foo 100.i8"
            inst_name "call"
              inst_identifier "call"
            inst_arg "%foo"
              function_identifier "%foo"
                function_name "foo"
            inst_arg "100.i8"
              value "100.i8"
                imm_number "100.i8"
                  decimal "100"
                  primitive_type "i8"
      stmt "return;"
        inst_stmt "return"
          inst "return"
            inst_name "return"
              inst_identifier "return"
  COMMENT "# multiplies arg by 2"
  function "func private %foo(v0.i8) -> i8 {
  block0:
  v1.i8 = mul v0 2.i8;
  v2.i8 = call %add_i8 v0 v1;
  return v2;
  }"
    function_signature "func private %foo(v0.i8) -> i8"
      linkage "private"
      function_identifier "%foo"
        function_name "foo"
      function_params "(v0.i8)"
        value_declaration "v0.i8"
          value_name "v0"
          type_name "i8"
            primitive_type "i8"
      function_ret_type "-> i8"
        type_name "i8"
          primitive_type "i8"
    block "block0:
    v1.i8 = mul v0 2.i8;
    v2.i8 = call %add_i8 v0 v1;
    return v2;"
      block_ident "block0"
        block_number "0"
      stmt "v1.i8 = mul v0 2.i8;"
        assign_stmt "v1.i8 = mul v0 2.i8"
          value_declaration "v1.i8"
            value_name "v1"
            type_name "i8"
              primitive_type "i8"
          inst "mul v0 2.i8"
            inst_name "mul"
              inst_identifier "mul"
            inst_arg "v0"
              value "v0"
                value_name "v0"
            inst_arg "2.i8"
              value "2.i8"
                imm_number "2.i8"
                  decimal "2"
                  primitive_type "i8"
      stmt "v2.i8 = call %add_i8 v0 v1;"
        assign_stmt "v2.i8 = call %add_i8 v0 v1"
          value_declaration "v2.i8"
            value_name "v2"
            type_name "i8"
              primitive_type "i8"
          inst "call %add_i8 v0 v1"
            inst_name "call"
              inst_identifier "call"
            inst_arg "%add_i8"
              function_identifier "%add_i8"
                function_name "add_i8"
            inst_arg "v0"
              value "v0"
                value_name "v0"
            inst_arg "v1"
              value "v1"
                value_name "v1"
      stmt "return v2;"
        inst_stmt "return v2"
          inst "return v2"
            inst_name "return"
              inst_identifier "return"
            inst_arg "v2"
              value "v2"
                value_name "v2"
  function "func private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) {
      block0:
          return;
  }"
    function_signature "func private %types(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo) "
      linkage "private"
      function_identifier "%types"
        function_name "types"
      function_params "(v0.*i8, v1.[i8; 2], v2.[*i8; 2], v3.[[i8; 2]; 2], v4.@foo, v5.*@foo)"
        value_declaration "v0.*i8"
          value_name "v0"
          type_name "*i8"
            ptr_type "*i8"
              type_name "i8"
                primitive_type "i8"
        value_declaration "v1.[i8; 2]"
          value_name "v1"
          type_name "[i8; 2]"
            array_type "[i8; 2]"
              type_name "i8"
                primitive_type "i8"
              array_size "2"
        value_declaration "v2.[*i8; 2]"
          value_name "v2"
          type_name "[*i8; 2]"
            array_type "[*i8; 2]"
              type_name "*i8"
                ptr_type "*i8"
                  type_name "i8"
                    primitive_type "i8"
              array_size "2"
        value_declaration "v3.[[i8; 2]; 2]"
          value_name "v3"
          type_name "[[i8; 2]; 2]"
            array_type "[[i8; 2]; 2]"
              type_name "[i8; 2]"
                array_type "[i8; 2]"
                  type_name "i8"
                    primitive_type "i8"
                  array_size "2"
              array_size "2"
        value_declaration "v4.@foo"
          value_name "v4"
          type_name "@foo"
            struct_identifier "@foo"
              struct_name "foo"
        value_declaration "v5.*@foo"
          value_name "v5"
          type_name "*@foo"
            ptr_type "*@foo"
              type_name "@foo"
                struct_identifier "@foo"
                  struct_name "foo"
    block "block0:
            return;"
      block_ident "block0"
        block_number "0"
      stmt "return;"
        inst_stmt "return"
          inst "return"
            inst_name "return"
              inst_identifier "return"
  function "func private %table(v0.i8) {
      block0:
          br_table v0 block0 (1.i8 block1) (2.i8 block2);
      block1:
          return 1.i8;
      block2:
          return 2.i8;
  }"
    function_signature "func private %table(v0.i8) "
      linkage "private"
      function_identifier "%table"
        function_name "table"
      function_params "(v0.i8)"
        value_declaration "v0.i8"
          value_name "v0"
          type_name "i8"
            primitive_type "i8"
    block "block0:
            br_table v0 block0 (1.i8 block1) (2.i8 block2);"
      block_ident "block0"
        block_number "0"
      stmt "br_table v0 block0 (1.i8 block1) (2.i8 block2);"
        inst_stmt "br_table v0 block0 (1.i8 block1) (2.i8 block2)"
          inst "br_table v0 block0 (1.i8 block1) (2.i8 block2)"
            inst_name "br_table"
              inst_identifier "br_table"
            inst_arg "v0"
              value "v0"
                value_name "v0"
            inst_arg "block0"
              block_ident "block0"
                block_number "0"
            inst_arg "(1.i8 block1)"
              value_block_map "(1.i8 block1)"
                value "1.i8"
                  imm_number "1.i8"
                    decimal "1"
                    primitive_type "i8"
                block_ident "block1"
                  block_number "1"
            inst_arg "(2.i8 block2)"
              value_block_map "(2.i8 block2)"
                value "2.i8"
                  imm_number "2.i8"
                    decimal "2"
                    primitive_type "i8"
                block_ident "block2"
                  block_number "2"
    block "block1:
            return 1.i8;"
      block_ident "block1"
        block_number "1"
      stmt "return 1.i8;"
        inst_stmt "return 1.i8"
          inst "return 1.i8"
            inst_name "return"
              inst_identifier "return"
            inst_arg "1.i8"
              value "1.i8"
                imm_number "1.i8"
                  decimal "1"
                  primitive_type "i8"
    block "block2:
            return 2.i8;"
      block_ident "block2"
        block_number "2"
      stmt "return 2.i8;"
        inst_stmt "return 2.i8"
          inst "return 2.i8"
            inst_name "return"
              inst_identifier "return"
            inst_arg "2.i8"
              value "2.i8"
                imm_number "2.i8"
                  decimal "2"
                  primitive_type "i8"
  function "func private %flow(v0.i64) -> i64 {
      block0:
          jump block1;
      block1:
          v1.i64 = phi (v0 block0) (100.i64 block2);
          v2.i1 = gt v1 10.i64;
          br v2 block2 block3;
      block2:
          jump block1;
      block3:
          return v1;
  }"
    function_signature "func private %flow(v0.i64) -> i64"
      linkage "private"
      function_identifier "%flow"
        function_name "flow"
      function_params "(v0.i64)"
        value_declaration "v0.i64"
          value_name "v0"
          type_name "i64"
            primitive_type "i64"
      function_ret_type "-> i64"
        type_name "i64"
          primitive_type "i64"
    block "block0:
            jump block1;"
      block_ident "block0"
        block_number "0"
      stmt "jump block1;"
        inst_stmt "jump block1"
          inst "jump block1"
            inst_name "jump"
              inst_identifier "jump"
            inst_arg "block1"
              block_ident "block1"
                block_number "1"
    block "block1:
            v1.i64 = phi (v0 block0) (100.i64 block2);
            v2.i1 = gt v1 10.i64;
            br v2 block2 block3;"
      block_ident "block1"
        block_number "1"
      stmt "v1.i64 = phi (v0 block0) (100.i64 block2);"
        assign_stmt "v1.i64 = phi (v0 block0) (100.i64 block2)"
          value_declaration "v1.i64"
            value_name "v1"
            type_name "i64"
              primitive_type "i64"
          inst "phi (v0 block0) (100.i64 block2)"
            inst_name "phi"
              inst_identifier "phi"
            inst_arg "(v0 block0)"
              value_block_map "(v0 block0)"
                value "v0"
                  value_name "v0"
                block_ident "block0"
                  block_number "0"
            inst_arg "(100.i64 block2)"
              value_block_map "(100.i64 block2)"
                value "100.i64"
                  imm_number "100.i64"
                    decimal "100"
                    primitive_type "i64"
                block_ident "block2"
                  block_number "2"
      stmt "v2.i1 = gt v1 10.i64;"
        assign_stmt "v2.i1 = gt v1 10.i64"
          value_declaration "v2.i1"
            value_name "v2"
            type_name "i1"
              primitive_type "i1"
          inst "gt v1 10.i64"
            inst_name "gt"
              inst_identifier "gt"
            inst_arg "v1"
              value "v1"
                value_name "v1"
            inst_arg "10.i64"
              value "10.i64"
                imm_number "10.i64"
                  decimal "10"
                  primitive_type "i64"
      stmt "br v2 block2 block3;"
        inst_stmt "br v2 block2 block3"
          inst "br v2 block2 block3"
            inst_name "br"
              inst_identifier "br"
            inst_arg "v2"
              value "v2"
                value_name "v2"
            inst_arg "block2"
              block_ident "block2"
                block_number "2"
            inst_arg "block3"
              block_ident "block3"
                block_number "3"
    block "block2:
            jump block1;"
      block_ident "block2"
        block_number "2"
      stmt "jump block1;"
        inst_stmt "jump block1"
          inst "jump block1"
            inst_name "jump"
              inst_identifier "jump"
            inst_arg "block1"
              block_ident "block1"
                block_number "1"
    block "block3:
            return v1;"
      block_ident "block3"
        block_number "3"
      stmt "return v1;"
        inst_stmt "return v1"
          inst "return v1"
            inst_name "return"
              inst_identifier "return"
            inst_arg "v1"
              value "v1"
                value_name "v1"
  EOI ""
